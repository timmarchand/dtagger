[{"path":"https://timmarchand.github.io/dtagger/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 dtagger authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://timmarchand.github.io/dtagger/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tim Marchand. Author, maintainer.","code":""},{"path":"https://timmarchand.github.io/dtagger/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Marchand T (2023). dtagger: Suite Functions Tag Text Multidimensional Analysis. https://github.com/timmarchand/dtagger, https://timmarchand.github.io/dtagger/.","code":"@Manual{,   title = {dtagger: Suite of Functions to Tag Text for Multidimensional Analysis},   author = {Tim Marchand},   year = {2023},   note = {https://github.com/timmarchand/dtagger, https://timmarchand.github.io/dtagger/}, }"},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"dtagger","dir":"","previous_headings":"","what":"Suite of Functions to Tag Text for Multidimensional Analysis","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"dtagger package R package replicates Biber’s (1988) Multidimensional analysis Nini’s (2019) Multi-Dimensional Analysis Tagger (MAT) tool. important function dtag_directory, tags directory folders plain text files MDA tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"can install development version dtagger GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"timmarchand/dtagger\")"},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"usage-dtag_directory","dir":"","previous_headings":"","what":"Usage dtag_directory","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"main function dtagger dtag_directory, tags directory plain text files MDA tags. tagged text used calculate dimension scores based Biber’s (1988) standard.","code":"library(dtagger) ## basic example code dtag_directory(path = \"path_to_folder\", n = NULL, ST = FALSE, deflated = TRUE)"},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"arguments","dir":"","previous_headings":"Usage dtag_directory","what":"Arguments","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"path: character string denoting folder containing target folders (level). n: optional argument denoting maximum number text files analyzed. ST: Logical argument denoting whether text files _ST tags included already. deflated: Logical argument. TRUE (default), returns dimension scores “deflated” results, means rare features Biber’s original study (mean freq < 0.1) removed Dimension score calculations.","code":""},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"returns","dir":"","previous_headings":"Usage dtag_directory","what":"Returns","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"function returns list tibbles including tagged texts, individual corpus-level scores dimension text word counts. function detects one corpus folder (folders prefixed $$), also return result post-hoc significance tests. set confidence intervals differences means dimension scores based Studentized range statistic, Tukey’s ‘Honest Significant Difference’ method. corpus_dimension_scores: tibble containing name corpus folder, closest text type average corpus dimensions, mode closest text type documents within corpus folder, calculated scores Dimension1 ~ Dimension6. document_dimension_scores: tibble containing name corpus folder, name text file, calculated scores Dimension1 ~ Dimension6, closest matching text type doc_id, based Biber (1989), MDA tags. dimension_tags: tibble containing corpus name, doc_id, Dimension1 ~ Dimension6 scores, MDA tags, additional information MDA tag. tokenized_tags: tibble containing corpus name, doc_id, text tokenized _ST tag, text tokenized  tag. Tukey_hsd: tibble containing dimension pairwise comparison, corpora pairwise comparison, expected difference means aov (zero), difference means aov, 95% familywise lower confidence level, 95% familywise upper confidence level, significance test.","code":""},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"references","dir":"","previous_headings":"Usage dtag_directory","what":"References","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"Biber, D. (1988). Variation across Speech Writing. Cambridge: Cambridge University Press. doi:10.1017/CBO9780511621024 Biber, D. (1989). typology English texts. , 27(1), 3-44. https://doi.org/10.1515/ling.1989.27.1.3 Nini, . (2019). Multi-Dimensional Analysis Tagger. Berber Sardinha, T. & Veirano Pinto M. (eds), Multi-Dimensional Analysis: Research Methods Current Issues, 67-94, London; New York: Bloomsbury Academic.","code":""},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"other-functions","dir":"","previous_headings":"","what":"Other functions","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"dtag_directory function wrapper number ‘dtagger’ functions also accessible package, including add_st_tags add_mda_tags, latter also modular structure, allowing users check modify algorithms behind scenes. utility functions might useful beyond multidimensional analysis include, quick_conc, fast KWIC (Key Word Context) concordancing, conc_by_tag display KWIC results search results based tag matches, missing_tags, identify tags produced one tagger found output another.","code":""},{"path":[]},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"add-stanford-_st-tags-with-add_st_tags","dir":"","previous_headings":"","what":"Add Stanford _ST tags with add_st_tags","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"add_st_tags function designed process annotate text using Universal Dependencies (UD) model udpipe package. allows users tokenize tag text part--speech (Stanford) tags, extract handle hesitation markers. function provides options controlling parsing, tokenizer type, handling flattened input.","code":"# Example text:  text <- \"This is an example sentence to be tagged\"  # Example speech, tokenized:  speech <- c(\"I\",\"don't\", \"know\" ,  \"erm\" ,\",\", \"whether\" , \"to\" ,  \"include\" ,\"hesitation\" , \"markers\", \".\")  # Initiate udpipe model  init_udpipe_model()  # Tag text  add_st_tags(text)  # Tag speech  add_st_tags(speech, st_hesitation = TRUE, tokenized = TRUE)"},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"arguments-1","dir":"","previous_headings":"Add Stanford _ST tags with add_st_tags","what":"Arguments","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"x character vector input text processed. mdl udpipe model use processing text. default udmodel. st_hesitation logical value indicating whether extract hesitation markers input text. TRUE, function extract hesitation markers return separately. Default FALSE. flattened logical value indicating input text flattened. FALSE, .e. character string tokenized form, function flatten text processing. Default TRUE. skip_parse logical value determining function skip parsing return tokenized tagged text. FALSE, function returns full UD model parsing. Default TRUE. … Additional arguments passed udpipe_annotate() function. example: – tokenizer = \"horizontal\" force udpipe_annotate function tokenize tokens separated white spaces. combine words trailing punctuation marks, unless spearated white space previously. –tokenizer = \"vertical\" force udpipe_annotate function tokenize tokens separated new line breaks. can useful want tokenizer recognise multi-word entities single token, avoid separating hyphenated words.","code":""},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"returns-1","dir":"","previous_headings":"Add Stanford _ST tags with add_st_tags","what":"Returns","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"function returns character vector tokenized tagged text. skip_parse FALSE, function returns tibble full udpipe model parsing. st_hesitation TRUE (experimental), function returns character vector tokenized tagged text hesitation markers extracted handled separately.","code":""},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"dependencies","dir":"","previous_headings":"Add Stanford _ST tags with add_st_tags","what":"Dependencies","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"function requires udpipe package installed loaded. udmodel object must also present global environment.","code":""},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"add-mda-tags-with-add_mda_tags","dir":"","previous_headings":"","what":"Add MDA tags with add_mda_tags()","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"function adds  tags character vector text. assumes input text already tokenized tagged Stanford POS (_ST) tags. function works applying series tagging rules text. rules can accessed adjusted referring individual function code files","code":""},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"usage","dir":"","previous_headings":"Add MDA tags with add_mda_tags()","what":"Usage","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"","code":"add_mda_tags(x, mda_hesitation = TRUE, progress = FALSE,...)"},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"arguments-2","dir":"","previous_headings":"Add MDA tags with add_mda_tags()","what":"Arguments","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"x: character vector containing text tagged. mda_hesitation: TRUE, hesitation markers extracted text. Experimental feature - hesitation markers excluded tagging? Regex hesitation markers default dtag_hesitation, can set using regex argument. See dtag_hesitation details. progress: TRUE, progress message printed. ...: Additional arguments pass .","code":""},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"examples","dir":"","previous_headings":"Add MDA tags with add_mda_tags()","what":"Examples","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"’s basic example use add_mda_tags() function: ’s detailed example shows tag text _ST  tags:","code":"text <- c(\"I_PPSS\", \"have_VB\", \"a_DET\", \"dog_NN\") add_mda_tags(text) # Generate some text text <- \"This example is short and sweet. This means that not all the tags will have been included, which is why this is really only a guide and it should be used with that in mind. Otherwise, I think it may lead to disappointment.\"  # Load udpipe model into the global environment for _ST tagging init_udpipe_model()  # Add Stanford tags to text text <- add_st_tags(text)  # Add <MDA> tags add_mda_tags(text)"},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"add-a-table-of-st-mda-and-other-ud-tags-with-add_tag_tbl","dir":"","previous_headings":"","what":"Add a Table of ST, MDA and Other UD Tags with add_tag_tbl","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"add_tag_tbl function wrapper around add_st_tags add_mda_tags functions also retains Universal Dependency tags produced udpipe model.","code":""},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"usage-1","dir":"","previous_headings":"Add a Table of ST, MDA and Other UD Tags with add_tag_tbl","what":"Usage","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"","code":"# Process text with the add_tag_tbl function text <- \"This is a sample sentence.\" result <- add_tag_tbl(text)"},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"arguments-3","dir":"","previous_headings":"Add a Table of ST, MDA and Other UD Tags with add_tag_tbl","what":"Arguments","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"x character vector input text processed. … Additional arguments passed add_st_tags() function.","code":""},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"returns-2","dir":"","previous_headings":"","what":"Returns","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"tibble original text annotated ST tags MDA tags. output columns includes: id columns (doc_id, paragraph_id, sentence_id etc.) udpipe output (token, upos, xpos, dep_rel, etc) st mda tags.","code":""},{"path":[]},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"quick-concordancing-with-quick_conc","dir":"","previous_headings":"","what":"Quick concordancing with quick_conc","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"quick_conc lightweight concordancing function returns key words context (KWIC) tidy format. Given character vector tokenized strings, x, either character vector regex patterns match (index) numeric vector use index matches, quick_conc returns tibble contextualized text shown around matched node.","code":""},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"usage-2","dir":"","previous_headings":"Quick concordancing with quick_conc","what":"Usage","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"","code":"quick_conc(x, index, n = 5, tokenize = FALSE, separated = FALSE)"},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"arguments-4","dir":"","previous_headings":"Quick concordancing with quick_conc","what":"Arguments","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"x: character vector tokenized strings, single string index: character vector regex patterns match, numeric vector use index matches n: integer, specify number context tokens either side matched node tokenize: logical, tokenize text first separated: logical, separate context tokens ","code":""},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"examples-1","dir":"","previous_headings":"Quick concordancing with quick_conc","what":"Examples","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"","code":"x <- c(\"The\", \"cat\", \"sat\", \"on\", \"the\", \"mat\")     index <- c(\"cat\", \"sat\")     quick_conc(x, index, n = 2)      x <- \"The dog barked loudly, alerting the neighbors of potential danger. A nearby park seemed like the perfect spot for the dog and it quickly made its way there.\"     quick_conc(x, index = \"dog\", n = 3, tokenize = TRUE, separated = TRUE)     quick_conc(x, index = c(4,8,12), tokenize = TRUE)"},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"concordancing-by-tags-with-conc_by_tag","dir":"","previous_headings":"","what":"Concordancing by tags with conc_by_tag","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"conc_by_tag allows fine-grained concordance searches tagged text typically used output udpipe::udpipe_annotate dtagger::dtag_tbl , dtagger::dtag_directory dtagger::add_tag_tbl functions. function takes relational data frame containing text concordance input, along name column containing text concatenate, name column containing tags match, tag match within tag column, identifying details corpus, doc_id etc. function can take two tag inputs, example matching upos == “ADJ” tags dep_rel == “amod” tags, seeing resulting keywords context.","code":""},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"usage-3","dir":"","previous_headings":"","what":"Usage","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"conc_by_tag function produces concordance lines text data finding two tag matches tokenized text. input dataframe column tokens tokenized form, separate columns tags, document corpus details. Typically, function can used output udpipe::udpipe_annotate dtagger::dtag_tbl dtagger::add_tab_tbl functions. concordancer can take two tag inputs, example matching upos == \"ADJ\" tags dep_rel == \"amod\" tags, seeing resulting key words context. output data frame KWIC format, containing specified match centre, left right windows concordancing.","code":"# Process text with the add_tag_tbl function (assuming add_mda_tags function is defined)  text <- c(doc1 = \"This is a simple sentence with a specific keyword.\",            doc2 = \"Is this one more complex or simpler?\")  data <- add_tag_tbl(text)   # Run conc_by_tag function with specified tags and matches  conc_by_tag(    data,    what = \"token\",    tag = \"xpos\",    match = \"^JJ$\",    cols = c(\"doc_id\", \"lemma\"),    tag2 = \"dep_rel\",    match2 = \"^amod$\"  )  conc_by_tag(    data,    what = \"token\",    tag = \"xpos\",    match = \"JJ\",    cols = c(\"doc_id\", \"dep_rel\"),    separated = TRUE,    n = 3  )"},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"arguments-5","dir":"","previous_headings":"","what":"Arguments","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"data: relational data frame containing text concordance. : name column containing text concatenate. Default “token”. tag: name column containing tags match. Default “mda”. match: tag match within tag column. cols: names columns include output. default, include corpus, doc_id, sentence, need changed inputting df different columns. tag2: name second column containing tags match (optional). match2: second tag match within tag2 column (optional). ...: Additional arguments passed onto dtagger::quick_conc.","code":""},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"returns-3","dir":"","previous_headings":"","what":"Returns","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"case - case number match found. left - objects immediately adjacent (n) left matched node, defined argument (default token). case separated = TRUE, left separated left(n):left1 match - matched search item, defined match argument. right - tokens immediately adjacent (n) right matched node, defined argument (default token). case separated = TRUE, right tokens separated right1:right(n). index - index row position matched result input data frame. cols - defined tag, tag2 cols arguments.","code":""},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"compare-tagging-output-with-missing_tags","dir":"","previous_headings":"","what":"Compare tagging output with missing_tags","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"missing_tags function used compare tagging results two character vectors tokenised form. function produces concordance lines tags first vector missing index position second vector. inputs exactly length. function work expected, two vectors equal length alligned token.","code":""},{"path":"https://timmarchand.github.io/dtagger/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Suite of Functions to Tag Text for Multidimensional Analysis","text":"","code":"# create two example vectors # vec1 tagged with ewt udpipe English model vec1 <- c(\"This_DT\", \"is_VBZ\", \"a_DT\", \"test_NN\", \"sentence_NN\", \"with_IN\",  \"tags_NNS\", \"._.\")   # vec2 tagged with line udpipe English model  vec2 <- c(\"This_DEM-SG\", \"is_PRES\", \"a_IND-SG\", \"test_SG-NOM\", \"sentence_SG-NOM\",  NA, \"tags_PL-NOM\", \"._Period\")   # find tags in vec1 that are missing in vec2 missing_tags(vec1, vec2, regex = \"DT\")  # find tags in vec2 that are missing in vec1 missing_tags(vec2, vec1, regex = \"Period\")  # find tags in vec1 that are missing in vec2 but with different tag searches missing_tags(vec1, vec2, regex1 = \"DT\", regex2 = \"IND-SG\")"},{"path":"https://timmarchand.github.io/dtagger/reference/Flatten.html","id":null,"dir":"Reference","previous_headings":"","what":"Flatten Text — d_flatten","title":"Flatten Text — d_flatten","text":"function takes vector strings flattens single string.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/Flatten.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flatten Text — d_flatten","text":"","code":"d_flatten(x)  d_flatten_text(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/Flatten.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flatten Text — d_flatten","text":"x character vector.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/Flatten.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flatten Text — d_flatten","text":"character vector elements single string.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/Flatten.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flatten Text — d_flatten","text":"wrapper stringr::str_flatten(x, \" \"). d_flatten() fine tagged text, use d_flatten_text() want remove floating spaces set punctuation marks (.,;:!?\") tokens.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/Flatten.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Flatten Text — d_flatten","text":"d_flatten: d_flatten d_flatten_text: d_flatten_text","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/Flatten.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flatten Text — d_flatten","text":"","code":"if (FALSE) { x <- c(\"This\" , \"is\" , \",\" , \"or\" , \"at\" , \"least\" , \"should\" , \"be\" , \",\" , \"a\" , \"suitable\" , \"example\" , \".\" , \"Is\" , \"it\", \"?\") d_flatten(x) d_flatten_text(x)}"},{"path":"https://timmarchand.github.io/dtagger/reference/add_awl_ttr.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Average Word Length and Type-Token Ratio — add_awl_ttr","title":"Compute Average Word Length and Type-Token Ratio — add_awl_ttr","text":"Computes Average Word Length (AWL) Type-Token Ratio (TTR) vector words.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/add_awl_ttr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Average Word Length and Type-Token Ratio — add_awl_ttr","text":"","code":"add_awl_ttr(vec, ttr = 400)"},{"path":"https://timmarchand.github.io/dtagger/reference/add_awl_ttr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Average Word Length and Type-Token Ratio — add_awl_ttr","text":"vec vector words compute AWL TTR. ttr number words consider TTR calculation. Default 400.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/add_awl_ttr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Average Word Length and Type-Token Ratio — add_awl_ttr","text":"tibble containing AWL TTR values.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/add_awl_ttr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Average Word Length and Type-Token Ratio — add_awl_ttr","text":"","code":"add_awl_ttr(c(\"Hello world\", \"This is R\")) #> # A tibble: 1 × 2 #>     AWL   TTR #>   <dbl> <dbl> #> 1   NaN   Inf"},{"path":"https://timmarchand.github.io/dtagger/reference/add_closest_text_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Add closest text type — add_closest_text_type","title":"Add closest text type — add_closest_text_type","text":"Adds column closest text type based Euclidean distances five dimensions type","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/add_closest_text_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add closest text type — add_closest_text_type","text":"","code":"add_closest_text_type(data, by = c(\"doc_id\", \"corpus\"))"},{"path":"https://timmarchand.github.io/dtagger/reference/add_closest_text_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add closest text type — add_closest_text_type","text":"data data frame corpus doc_id column, columns Dimension scores Dimension1 ~ Dimension5. data frame needs list purrr::map function work. column name dimensions grouped.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/add_closest_text_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add closest text type — add_closest_text_type","text":"data frame closest_text_type column added","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/add_mda_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Add <MDA> Tags — add_mda_tags","title":"Add <MDA> Tags — add_mda_tags","text":"Adds <MDA> tags given text. text must already include _ST tags tokenized.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/add_mda_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add <MDA> Tags — add_mda_tags","text":"","code":"add_mda_tags(x, mda_hesitation = TRUE, progress = FALSE, ...)"},{"path":"https://timmarchand.github.io/dtagger/reference/add_mda_tags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add <MDA> Tags — add_mda_tags","text":"x character string mda_hesitation logical. TRUE, hesitation markers extracted text. Experimental feature - hesitation markers excluded tagging? Regex hesitation markers default dtag_hesitation, can set using regex argument. See dtag_hesitation details. progress logical. TRUE, progress message printed ... Additional arguments pass .","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/add_mda_tags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add <MDA> Tags — add_mda_tags","text":"character string <MDA> tags added","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/add_mda_tags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add <MDA> Tags — add_mda_tags","text":"","code":"if (FALSE) { # Simple example: text <- c(\"I_PPSS\", \"have_VB\", \"a_DET\", \"dog_NN\") add_mda_tags(text) # More detailed example: # Generate some text text <- \"This example is short and sweet. This means that not all the tags will have been included, which is why this is really only a guide and it should be used with that in mind. Otherwise, I think it may lead to disappointment.\" # Load udpipe model into the global environment for _ST tagging init_udpipe_model() # Add Stanford tags to text text <- add_st_tags(text) # Add <MDA> tags add_mda_tags(text)}"},{"path":"https://timmarchand.github.io/dtagger/reference/add_spell_suggestions.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Irregular Spellings and Suggest Corrections to a Table of Text — add_spell_suggestions","title":"Identify Irregular Spellings and Suggest Corrections to a Table of Text — add_spell_suggestions","text":"function identifies spelling mistakes given text column data frame, suggests corrections, adds new columns. uses hunspell package spell checking providing suggestions. output can exported spreadsheet easier editing.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/add_spell_suggestions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Irregular Spellings and Suggest Corrections to a Table of Text — add_spell_suggestions","text":"","code":"add_spell_suggestions(   tbl,   x = \"text\",   window = 5,   dict = \"en_US\",   change_to = NULL )"},{"path":"https://timmarchand.github.io/dtagger/reference/add_spell_suggestions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Irregular Spellings and Suggest Corrections to a Table of Text — add_spell_suggestions","text":"tbl data frame contains text data. x character string indicating name text column tbl (default \"text\"). window integer specifying context window size quick_conc function (default 5). dict character string indicating dictionary used hunspell (default \"en_US\"). change_to character string specifying column name (\"alt_01\" \"typo\") use change_to column (default NULL).","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/add_spell_suggestions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Irregular Spellings and Suggest Corrections to a Table of Text — add_spell_suggestions","text":"tibble identified spelling mistakes corresponding suggested corrections. row represents instance spelling mistake, cell 'alt' column represents comma-separated list spelling suggestions. change_to specified, additional column 'change_to' included either original incorrect spelling  (case change_to = \"typo\"), function's best guess correct spelling (change_to = \"alt_01\"). can useful exporting spreadsheet app editing.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/add_spell_suggestions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Irregular Spellings and Suggest Corrections to a Table of Text — add_spell_suggestions","text":"","code":"if (FALSE) { data <- tibble(text = c(\"This is a smaple text.\", \"Another txt with a typo.\")) add_spell_suggestions(data) }"},{"path":"https://timmarchand.github.io/dtagger/reference/add_st_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Add ST Tags to Text — add_st_tags","title":"Add ST Tags to Text — add_st_tags","text":"add_st_tags function designed process annotate text using Universal Dependencies (UD) model udpipe package. allows users tokenize tag text part--speech (Stanford) tags, extract handle hesitation markers. function provides options controlling parsing, tokenizer type, handling flattened input.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/add_st_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add ST Tags to Text — add_st_tags","text":"","code":"add_st_tags(   x,   mdl = udmodel,   st_hesitation = FALSE,   flattened = TRUE,   skip_parse = TRUE,   ... )"},{"path":"https://timmarchand.github.io/dtagger/reference/add_st_tags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add ST Tags to Text — add_st_tags","text":"x character vector input text processed. mdl udpipe model use processing text. default udmodel. st_hesitation logical value indicating whether extract hesitation markers input text. TRUE, function extract hesitation markers return separately. Default FALSE. flattened logical value indicating input text flattened. FALSE, .e. character string tokenized form, function flatten text processing. Default TRUE. skip_parse logical value determining function skip parsing return tokenized tagged text. FALSE, function returns full UD model parsing. Default TRUE. ... Additional arguments passed udpipe_annotate() function. example: tokenizer = \"horizontal\" force udpipe_annotate function tokenize tokens separated white spaces. combine words trailing punctuation marks, unless separated white space previously. tokenizer = \"vertical\" force udpipe_annotate function tokenize tokens separated new line breaks.  can useful want tokenizer recognise multi-word entities single token, avoid separating hyphenated words etc.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/add_st_tags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add ST Tags to Text — add_st_tags","text":"skip_parse FALSE, function returns tibble full udpipe model parsing. st_hesitation TRUE (experimental), function returns character vector tokenized tagged text hesitation markers extracted handled separately. Otherwise, function returns character vector tokenized tagged text.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/add_st_tags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add ST Tags to Text — add_st_tags","text":"","code":"if (FALSE) { # Example text: text <- \"This is an example sentence to be tagged\" # Example speech, tokenized: speech <- c(\"I\",\"don't\", \"know\" ,  \"erm\" ,\",\", \"whether\" , \"to\" , \"include\" ,\"hesitation\" , \"markers\", \".\") # Initiate udpipe model init_udpipe_model() # Tag text add_st_tags(text) # Tag speech add_st_tags(speech, st_hesitation = TRUE, tokenized = TRUE) text <- \"I'm in a part-time job, at the moment.\" text2 <- \"I'm\\nin\\na\\npart-time\\njob\\n,\\n\\nat the moment\\n.\\n\" # tokenizes using default model - may separate some hyphenated words add_st_tags(text) # tokenizes on whitespaces - punctuation marks can be lumped in with words add_st_tags(text, tokenizer = \"horizontal\") # tokenizes on user-defined line breaks - possible to capture multi-word expressions  add_st_tags(text2, tokenizer = \"vertical\") }"},{"path":"https://timmarchand.github.io/dtagger/reference/add_tag_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Table of ST, MDA and Other UD Tags — add_tag_tbl","title":"Add a Table of ST, MDA and Other UD Tags — add_tag_tbl","text":"add_tag_tbl function wrapper around add_st_tags function also adds MDA tags text. processes annotates input text using full Universal Dependencies (UD) model udpipe package, adds MDA tags resulting output.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/add_tag_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Table of ST, MDA and Other UD Tags — add_tag_tbl","text":"","code":"add_tag_tbl(x, ...)"},{"path":"https://timmarchand.github.io/dtagger/reference/add_tag_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Table of ST, MDA and Other UD Tags — add_tag_tbl","text":"x character vector input text processed. ... Additional arguments passed add_st_tags() function.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/add_tag_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a Table of ST, MDA and Other UD Tags — add_tag_tbl","text":"tibble original text annotated ST tags MDA tags. output columns includes id columns  (doc_id, paragraph_id, sentence_id etc.) udpipe output (token, upos, xpos, dep_rel, etc) st mda tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/add_tag_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a Table of ST, MDA and Other UD Tags — add_tag_tbl","text":"","code":"if (FALSE) { # Load the required udpipe model init_udpipe_model()   # Process text with the add_tag_tbl function text <- \"This is a sample sentence.\" result <- add_tag_tbl(text) }"},{"path":"https://timmarchand.github.io/dtagger/reference/biber_base.html","id":null,"dir":"Reference","previous_headings":"","what":"Biber Base — biber_base","title":"Biber Base — biber_base","text":"Baseline statistics calculating Dimension scores based Biber (1988).","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/biber_base.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Biber Base — biber_base","text":"","code":"biber_base"},{"path":"https://timmarchand.github.io/dtagger/reference/biber_base.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Biber Base — biber_base","text":"tibble 72 rows 6 variables: (dimension)Dimension feature belongs. Features used original study categorised Others (feature)Tagged features text also Average Word Length <AWL> Type Token Ratio <TTR> (detail)Simple description feature (biber_mean)Mean value feature found Biber 1988 (biber_sd)Standard deviation feature found Biber 1988 (loading)Whether feature positive negative loading MDA","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/biber_base.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Biber Base — biber_base","text":"data lists features used (plus others), includes mean sd values features base calculation Z-scores.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/compare_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Tags — compare_tags","title":"Compare Tags — compare_tags","text":"function compares tags two vectors strings.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/compare_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Tags — compare_tags","text":"","code":"compare_tags(vec1, vec2, regex = NULL, regex1 = NULL, regex2 = NULL, ...)"},{"path":"https://timmarchand.github.io/dtagger/reference/compare_tags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Tags — compare_tags","text":"vec1 character vector tagged text tokenised form used reference. vec2 character vector tagged text tokenised form compare vec1. regex regular expression tag checked vectors. regex1 regular expression tag search vector 1. regex2 regular expression tag search vector 2. ... Additional arguments passed quick_conc output.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/compare_tags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Tags — compare_tags","text":"tibble showing quick_conc concordance tags vector 1 displaid line line comparison vector 2.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/compare_tags.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare Tags — compare_tags","text":"function used compare tagging results om two texts. texts reduced two vectors tokenised form. function produces concordance lines tags chosen regex index position. inputs exactly length.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/conc_by_tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Concordance Text By Tag Choices — conc_by_tag","title":"Concordance Text By Tag Choices — conc_by_tag","text":"function produces concordance lines text data finding two tag matches tokenized text.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/conc_by_tag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concordance Text By Tag Choices — conc_by_tag","text":"","code":"conc_by_tag(   data,   what = \"token\",   tag = \"mda\",   match,   cols = NULL,   tag2 = NULL,   match2 = NULL,   ... )"},{"path":"https://timmarchand.github.io/dtagger/reference/conc_by_tag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concordance Text By Tag Choices — conc_by_tag","text":"data relational data frame containing text concordance. data frame expected one column tokens, tokenized form, least one column corresponding tags, identifying details corpus, doc_id etc. name column containing text concatenate. Default \"token\". tag name column containing tags match. Default \"mda\". match tag match within tag column. match can take regex, can use anchoring characters (^ $) specific searches. cols names columns include output. may useful include extra reference columns (doc_id), tags fine-grained filtering. tag2 name second column containing tags match (optional). match2 second tag match within tag2 column (optional). ... Additional arguments passed onto dtagger::quick_conc. example: pass separated = TRUE argument, enable sorting search result adjacent tokens left right pass n = 3 argument, limit search window 3 tokens either side match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/conc_by_tag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concordance Text By Tag Choices — conc_by_tag","text":"tibble containing: case - case number match found. left - objects immediately adjacent (n) left matched node, defined argument (default token). case separated = TRUE, left  separated left(n):left1 match - matched search item, defined match argument. right - tokens immediately adjacent (n) right matched node, defined argument (default token). case separated = TRUE, right tokens separated right1:right(n). index - index row position matched result input data frame. cols - defined tag, tag2 cols arguments.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/conc_by_tag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Concordance Text By Tag Choices — conc_by_tag","text":"purpose function allow fine-grained concordance searches tagged text. input dataframe column tokens tokenized form, separate columns tags, document corpus details. Typically, function can used output udpipe::udpipe_annotate dtagger::dtag_tbl, dtagger::dtag_directory dtagger::add_tag_tbl functions. concordancer can take two tag inputs, example matching upos == \"ADJ\" tags dep_rel == \"amod\" tags, seing resulting key words context.","code":""},{"path":[]},{"path":"https://timmarchand.github.io/dtagger/reference/d_Tukey_hsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Tukey HSD on Dimension scores — d_Tukey_hsd","title":"Run Tukey HSD on Dimension scores — d_Tukey_hsd","text":"function performs Tukey HSD data frame dimension scores one corpus anaylsed. using result dtag_tbl, data frame needs changed long format, e.g. using pivot_longer(tbl , contains(\"Dimension\"), names_to = \"dimension\", names_transform = list(dimension = .factor)), extra column identify source corpus.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/d_Tukey_hsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Tukey HSD on Dimension scores — d_Tukey_hsd","text":"","code":"d_Tukey_hsd(df, dimension = \"dimension\", corpus = \"corpus\")"},{"path":"https://timmarchand.github.io/dtagger/reference/d_Tukey_hsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Tukey HSD on Dimension scores — d_Tukey_hsd","text":"df data frame dimension scores long format, column identifying input corpus. dimension dimension Tukey HSD test. corpus corpus Tukey HSD test.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/d_Tukey_hsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Tukey HSD on Dimension scores — d_Tukey_hsd","text":"data frame Tukey HSD test results.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/d_grepl.html","id":null,"dir":"Reference","previous_headings":"","what":"Pattern matching in strings — d_grepl","title":"Pattern matching in strings — d_grepl","text":"Match given pattern provided strings using grepl speed, stringr format convenience","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/d_grepl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pattern matching in strings — d_grepl","text":"","code":"d_grepl(x, pattern, ...)"},{"path":"https://timmarchand.github.io/dtagger/reference/d_grepl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pattern matching in strings — d_grepl","text":"x character vector pattern matching done pattern pattern match ... Additional arguments pass grepl()","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/d_grepl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pattern matching in strings — d_grepl","text":"logical vector","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/d_grepl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pattern matching in strings — d_grepl","text":"","code":"x <- c(\"ABC\", \"abC\", \"Bcd\") d_grepl(x, \"bc\") #> [1] TRUE TRUE TRUE  d_grepl_case(x, \"bc\") #> [1] FALSE FALSE FALSE"},{"path":"https://timmarchand.github.io/dtagger/reference/d_grepl_case.html","id":null,"dir":"Reference","previous_headings":"","what":"Pattern matching in strings — d_grepl_case","title":"Pattern matching in strings — d_grepl_case","text":"Match given pattern provided strings using grepl speed, stringr format convenience","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/d_grepl_case.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pattern matching in strings — d_grepl_case","text":"","code":"d_grepl_case(x, pattern, ...)"},{"path":"https://timmarchand.github.io/dtagger/reference/d_grepl_case.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pattern matching in strings — d_grepl_case","text":"x character vector pattern matching done pattern pattern match ... Additional arguments pass grepl()","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/d_grepl_case.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pattern matching in strings — d_grepl_case","text":"logical vector","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/d_grepl_case.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pattern matching in strings — d_grepl_case","text":"","code":"x <- c(\"ABC\", \"abC\", \"Bcd\") d_grepl(x, \"bc\") #> [1] TRUE TRUE TRUE  d_grepl_case(x, \"bc\") #> [1] FALSE FALSE FALSE"},{"path":"https://timmarchand.github.io/dtagger/reference/d_sub.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitute Patterns in a Vector — d_sub","title":"Substitute Patterns in a Vector — d_sub","text":"Substitute patterns vector x given replacement,  using base::sub speed, stringr format convenience","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/d_sub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitute Patterns in a Vector — d_sub","text":"","code":"d_sub(x, pattern, replacement, perl = TRUE, ...)"},{"path":"https://timmarchand.github.io/dtagger/reference/d_sub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitute Patterns in a Vector — d_sub","text":"x vector. pattern pattern look . replacement replacement string. perl Logical value. TRUE, pattern Perl-compatible regular expression. FALSE, pattern POSIX basic regular expression. ... arguments passed sub.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/d_sub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitute Patterns in a Vector — d_sub","text":"vector patterns replaced.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/d_sub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Substitute Patterns in a Vector — d_sub","text":"","code":"d_sub(x = c(\"abc\", \"def\", \"ghi\"), pattern = \"[a-z]{3}\", replacement = \"0\") #> [1] \"0\" \"0\" \"0\""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_adverbial_subords.html","id":null,"dir":"Reference","previous_headings":"","what":"Tag Adverbial Subordinating Conjunctions — dtag_adverbial_subords","title":"Tag Adverbial Subordinating Conjunctions — dtag_adverbial_subords","text":"function tags adverbial subordinating conjunctions text previously _ST tagged tokenized.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_adverbial_subords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tag Adverbial Subordinating Conjunctions — dtag_adverbial_subords","text":"","code":"dtag_adverbial_subords(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_adverbial_subords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tag Adverbial Subordinating Conjunctions — dtag_adverbial_subords","text":"x character vector strings tokenized tagged _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_adverbial_subords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tag Adverbial Subordinating Conjunctions — dtag_adverbial_subords","text":"character vector adverbial subordinating conjunctions <OSUB> tags added.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_adverbial_subords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tag Adverbial Subordinating Conjunctions — dtag_adverbial_subords","text":"","code":"dtag_adverbial_subords(c(\"Since_RB\",  \"he_PRP\" , \"left_VBD\")) #> [1] \"Since_RB <OSUB>\" \"he_PRP\"          \"left_VBD\""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_all_adjectives.html","id":null,"dir":"Reference","previous_headings":"","what":"Add adjective <JJ> tag to all attributive adjectives — dtag_all_adjectives","title":"Add adjective <JJ> tag to all attributive adjectives — dtag_all_adjectives","text":"Adds generic adjective tag  <JJ> attributive adjectives based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_all_adjectives.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add adjective <JJ> tag to all attributive adjectives — dtag_all_adjectives","text":"","code":"dtag_all_adjectives(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_all_adjectives.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add adjective <JJ> tag to all attributive adjectives — dtag_all_adjectives","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_all_adjectives.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add adjective <JJ> tag to all attributive adjectives — dtag_all_adjectives","text":"character vector attributive adjectives tagged <JJ>.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_all_adverbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Add adverb <RB> tag to all adverbs — dtag_all_adverbs","title":"Add adverb <RB> tag to all adverbs — dtag_all_adverbs","text":"Adds generic adverb tag  <RB> adverbs included categories.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_all_adverbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add adverb <RB> tag to all adverbs — dtag_all_adverbs","text":"","code":"dtag_all_adverbs(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_all_adverbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add adverb <RB> tag to all adverbs — dtag_all_adverbs","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_all_adverbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add adverb <RB> tag to all adverbs — dtag_all_adverbs","text":"character vector adverbs tagged <RB>.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_all_adverbs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add adverb <RB> tag to all adverbs — dtag_all_adverbs","text":"functions adds <RB> tag adverbs except following: Amplifiers <AMP> Discourse particles <DPAR> Downtoners <DWNT> Emphatis <EMPH> Subordinating conjunctions <OSUB> Place adverbials <PLACE> Quantifiers <QUAN> Time adverbials <TIME> <XX0>","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_all_nouns.html","id":null,"dir":"Reference","previous_headings":"","what":"Add noun <NN> tag to all nouns — dtag_all_nouns","title":"Add noun <NN> tag to all nouns — dtag_all_nouns","text":"Adds generic noun tag  <NN> nouns based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_all_nouns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add noun <NN> tag to all nouns — dtag_all_nouns","text":"","code":"dtag_all_nouns(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_all_nouns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add noun <NN> tag to all nouns — dtag_all_nouns","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_all_nouns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add noun <NN> tag to all nouns — dtag_all_nouns","text":"character vector  nouns tagged <NN>.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_all_pp.html","id":null,"dir":"Reference","previous_headings":"","what":"Add past participle <VBN> tag to all past participle verb forms — dtag_all_pp","title":"Add past participle <VBN> tag to all past participle verb forms — dtag_all_pp","text":"Adds generic past participle  tag  <VBN> allpast participle verb forms based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_all_pp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add past participle <VBN> tag to all past participle verb forms — dtag_all_pp","text":"","code":"dtag_all_pp(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_all_pp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add past participle <VBN> tag to all past participle verb forms — dtag_all_pp","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_all_pp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add past participle <VBN> tag to all past participle verb forms — dtag_all_pp","text":"character vector past participle verb matches tagged <VBN>.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_amplifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Tag amplifiers — dtag_amplifier","title":"Tag amplifiers — dtag_amplifier","text":"Adds amplifier tag  <AMP> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_amplifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tag amplifiers — dtag_amplifier","text":"","code":"dtag_amplifier(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_amplifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tag amplifiers — dtag_amplifier","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_amplifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tag amplifiers — dtag_amplifier","text":"character vector amplifier <AMP> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_be_main.html","id":null,"dir":"Reference","previous_headings":"","what":"Add BE as main verb <BEMA> tag — dtag_be_main","title":"Add BE as main verb <BEMA> tag — dtag_be_main","text":"Adds main verb tag <BEMA> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_be_main.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add BE as main verb <BEMA> tag — dtag_be_main","text":"","code":"dtag_be_main(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_be_main.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add BE as main verb <BEMA> tag — dtag_be_main","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_be_main.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add BE as main verb <BEMA> tag — dtag_be_main","text":"character vector main verb <BEMA> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_causative.html","id":null,"dir":"Reference","previous_headings":"","what":"Add causative <CAUS> tag — dtag_causative","title":"Add causative <CAUS> tag — dtag_causative","text":"Adds causative tag <CAUS> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_causative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add causative <CAUS> tag — dtag_causative","text":"","code":"dtag_causative(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_causative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add causative <CAUS> tag — dtag_causative","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_causative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add causative <CAUS> tag — dtag_causative","text":"character vector causative  <CAUS> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_causative.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add causative <CAUS> tag — dtag_causative","text":"function matches \"\" informal \"cos\" causatives.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_concessive.html","id":null,"dir":"Reference","previous_headings":"","what":"Add concessive subordinator <CONC> tag — dtag_concessive","title":"Add concessive subordinator <CONC> tag — dtag_concessive","text":"Adds concessive subordinator tag <CONC> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_concessive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add concessive subordinator <CONC> tag — dtag_concessive","text":"","code":"dtag_concessive(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_concessive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add concessive subordinator <CONC> tag — dtag_concessive","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_concessive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add concessive subordinator <CONC> tag — dtag_concessive","text":"character vector concessive subordinator  <CONC> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_concessive.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add concessive subordinator <CONC> tag — dtag_concessive","text":"function matches \"although\" \"though\" shortened form \"tho\" concessive subordinators.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_conditional.html","id":null,"dir":"Reference","previous_headings":"","what":"Add conditional subordinator <COND> tag — dtag_conditional","title":"Add conditional subordinator <COND> tag — dtag_conditional","text":"Adds conditional subordinator tag <COND> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_conditional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add conditional subordinator <COND> tag — dtag_conditional","text":"","code":"dtag_conditional(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_conditional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add conditional subordinator <COND> tag — dtag_conditional","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_conditional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add conditional subordinator <COND> tag — dtag_conditional","text":"character vector conditional subordinator  <COND> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_conjuncts.html","id":null,"dir":"Reference","previous_headings":"","what":"Tag conjuncts <CONJ> — dtag_conjuncts","title":"Tag conjuncts <CONJ> — dtag_conjuncts","text":"function tags conjuncts text previously _ST tagged tokenized.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_conjuncts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tag conjuncts <CONJ> — dtag_conjuncts","text":"","code":"dtag_conjuncts(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_conjuncts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tag conjuncts <CONJ> — dtag_conjuncts","text":"x character vector strings tokenized tagged _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_conjuncts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tag conjuncts <CONJ> — dtag_conjuncts","text":"character vector adverbial subordinating conjunctions <CONJ> tags added.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_conjuncts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tag conjuncts <CONJ> — dtag_conjuncts","text":"function adds <CONJ> tag relevant token. case conjuncts part multi-word expression (e.g. in_IN addition_NN), function adds <CONJ> tag first token, _NULL tag second (e.g. \"in_IN <CONJ>\" , \"addition_NULL\").","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_conjuncts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tag conjuncts <CONJ> — dtag_conjuncts","text":"","code":"if (FALSE)  x <- c(\"In_IN\", \"addition_NN\", \",_,\", \"the_DT\", \"project_NN\", \"went_VBD\", \"way_NN\", \"over_RB\", \"budget_NN\", \"._.\") dtag_conjuncts(x) #> Error in eval(expr, envir, enclos): object 'x' not found"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_contractions.html","id":null,"dir":"Reference","previous_headings":"","what":"Add contractions <CONT> tag — dtag_contractions","title":"Add contractions <CONT> tag — dtag_contractions","text":"Adds contraction tag <CONT> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_contractions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add contractions <CONT> tag — dtag_contractions","text":"","code":"dtag_contractions(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_contractions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add contractions <CONT> tag — dtag_contractions","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_contractions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add contractions <CONT> tag — dtag_contractions","text":"character vector contraction <CONT> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_dem_pronouns.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Demonstrative Pronouns <DEMP> tag — dtag_dem_pronouns","title":"Add Demonstrative Pronouns <DEMP> tag — dtag_dem_pronouns","text":"Adds demonstrative pronouns <DEMP> based regex matches.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_dem_pronouns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Demonstrative Pronouns <DEMP> tag — dtag_dem_pronouns","text":"","code":"dtag_dem_pronouns(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_dem_pronouns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Demonstrative Pronouns <DEMP> tag — dtag_dem_pronouns","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_dem_pronouns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Demonstrative Pronouns <DEMP> tag — dtag_dem_pronouns","text":"character vector demonstrative pronouns <DEMP> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_demonstratives.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Demonstratives  <DEMO> tag — dtag_demonstratives","title":"Add Demonstratives  <DEMO> tag — dtag_demonstratives","text":"Adds demonstratives <DEMO> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_demonstratives.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Demonstratives  <DEMO> tag — dtag_demonstratives","text":"","code":"dtag_demonstratives(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_demonstratives.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Demonstratives  <DEMO> tag — dtag_demonstratives","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_demonstratives.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Demonstratives  <DEMO> tag — dtag_demonstratives","text":"character vector demonstratives <DEMO> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_directory.html","id":null,"dir":"Reference","previous_headings":"","what":"dtag_directory — dtag_directory","title":"dtag_directory — dtag_directory","text":"Tag directory folders plain text files <MDA> tags","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_directory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dtag_directory — dtag_directory","text":"","code":"dtag_directory(   path,   n = NULL,   ST = FALSE,   deflated = TRUE,   exclude = NULL,   ... )"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_directory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dtag_directory — dtag_directory","text":"path character string denoting folder containing target folders (level). n optional argument denoting maximum number text files analyzed. ST Logical argument denoting whether text files _ST tags included already. deflated Logical argument. TRUE (default), addition normal results, function returns dimension scores \"deflated\" results, means rare features Biber's original study (mean freq < 0.1) removed Dimension score calculations. exclude character vector dimension tags want include analysis. Note dimension tags quoted inside angular brackets. example: (1) word counts texts 400, may want exclude type token ratios analysis exclude = \"<TTR>\". (2) tags (<WZPRES> <GER>)  manually checked original Biber study, automatically tagged .  can exclude tags naming exclude character vector exclude = c(\"<GER>\", \"<WZPRES>\"). (3) exclude tags manually checked Biber, use argument exclude = \"<MANUAL>\" argument: exclude = c(\"<DEMP>\", \"<GER>\", \"<PASTP>\", \"<PRESP>\", \"<SERE>\", \"<THAC>\", \"<THVC>\", \"<TOBJ>\", \"<TSUB>\", \"<WZPAST>\", \"<WZPRES>\") (4) can combine (1) (3) exclude = c(\"<MANUAL>\" , \"<TTR>\") ... Additional arguments passed .","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_directory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dtag_directory — dtag_directory","text":"list data frames containing: corpus_dimension_scores corpus - name corpus folder corpus_text_type - closest text type average corpus dimensions most_common_text_type - mode closest text type documents within corpus folder Dimension scores - calculated scores Dimension1 ~ Dimension6 document_dimension_scores corpus - name corpus folder doc_id - name text file Dimension scores - calculated scores Dimension1 ~ Dimension6 closest_text_type - closest matching text type doc_id, based Biber 1989 dimension_tags dimension - Dimension1 ~ Dimension6 Biber 1988 feature feature - <MDA> tag AWL TTR detail - brief description feature count - number times feature counted text value - case <MDA> tag, normailsed frequency per 100 tokens z-score - value scaled biber_mean biber_sd d-score - z-score, sign negative dimension features reversed biber_mean biber_sd feature, based Biber 1988 tokenized_tags corpus - name corpus folder doc_id - name text file st - text tokenized _ST tag mda - text tokenized <MDA> tag texts corpus - name corpus folder doc_id - name text file raw_text - untagged, flattened text doc_id tagged_text - flattened text _ST <MDA> tags doc_id wordcount - number non-punctuation tokens found text Tukey_hsd dimension - dimension pairwise comparison contrast - corpora pairwise comparison null.value - expected difference means aov (zero) estimate - difference means aov conf.low - 95% familywise lower confidence level conf.high - 95% familywise upper confidence level p.value -  significance test","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_directory.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"dtag_directory — dtag_directory","text":"target texts tagged placed directory folders $$ prefixed folder names. function read text files target folders, retrieve folder names \"corpus\" variable. texts already tagged Stanford _ST tags, choose option ST = TRUE. Otherwise, function add_st_tags() run texts, necessary udpipe model loaded. See add_st_tags details. function adds multidimensional analysis <MDA> tags, calculates Dimension scores based Biber 1988 standard. Note tags original study can excluded analysis, exclude argument. argument deflated = TRUE, function also returns Dimension scores calculated without using low mean frequency features Biber's original study, following MAT tagger algorithm (Nini 2019). function returns list tibbles including tagged texts, individual corpus-level scores dimension text word counts. function detects one corpus folder (folders prefixed $$), also return result post-hoc significance tests. set confidence intervals differences means dimension scores based Studentized range statistic, Tukey's ‘Honest Significant Difference’ method.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_directory.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"dtag_directory — dtag_directory","text":"Biber, D. (1988). Variation across Speech Writing. Cambridge: Cambridge University Press. doi:10.1017/CBO9780511621024 Biber, D. (1989). typology English texts. , 27(1), 3-44. https://doi.org/10.1515/ling.1989.27.1.3 Nini, . (2019). Multi-Dimensional Analysis Tagger. Berber Sardinha, T. &  Veirano Pinto M. (eds), Multi-Dimensional Analysis: Research Methods Current  Issues, 67-94, London; New York: Bloomsbury Academic.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_directory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dtag_directory — dtag_directory","text":"","code":"if (FALSE) { dtag_directory(\"path_to_directory\")}"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_disc_part.html","id":null,"dir":"Reference","previous_headings":"","what":"Add discourse particles <DPART> tag — dtag_disc_part","title":"Add discourse particles <DPART> tag — dtag_disc_part","text":"Adds discourse particles tag <DPART> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_disc_part.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add discourse particles <DPART> tag — dtag_disc_part","text":"","code":"dtag_disc_part(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_disc_part.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add discourse particles <DPART> tag — dtag_disc_part","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_disc_part.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add discourse particles <DPART> tag — dtag_disc_part","text":"character vector discourse particles <DPART> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_downtoner.html","id":null,"dir":"Reference","previous_headings":"","what":"Tag downtoners — dtag_downtoner","title":"Tag downtoners — dtag_downtoner","text":"Adds downtoner tag  <DWNT> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_downtoner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tag downtoners — dtag_downtoner","text":"","code":"dtag_downtoner(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_downtoner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tag downtoners — dtag_downtoner","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_downtoner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tag downtoners — dtag_downtoner","text":"character vector downtoner <DWNT> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_emphatics.html","id":null,"dir":"Reference","previous_headings":"","what":"Add emphatic <EMPH> tag — dtag_emphatics","title":"Add emphatic <EMPH> tag — dtag_emphatics","text":"Adds emphatic tag <EMPH> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_emphatics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add emphatic <EMPH> tag — dtag_emphatics","text":"","code":"dtag_emphatics(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_emphatics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add emphatic <EMPH> tag — dtag_emphatics","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_emphatics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add emphatic <EMPH> tag — dtag_emphatics","text":"character vector emphatic <EMPH> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_emphatics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add emphatic <EMPH> tag — dtag_emphatics","text":"case multiword units \"lot\", second token _ST tag replaced _NULL","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_ex_there.html","id":null,"dir":"Reference","previous_headings":"","what":"Tag existential there — dtag_ex_there","title":"Tag existential there — dtag_ex_there","text":"Adds existential tag  <EX> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_ex_there.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tag existential there — dtag_ex_there","text":"","code":"dtag_ex_there(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_ex_there.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tag existential there — dtag_ex_there","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_ex_there.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tag existential there — dtag_ex_there","text":"character vector existential <EX> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_first_person_pronoun.html","id":null,"dir":"Reference","previous_headings":"","what":"Add first person pronoun <FPP1> tag — dtag_first_person_pronoun","title":"Add first person pronoun <FPP1> tag — dtag_first_person_pronoun","text":"Adds first person pronoun tag <FPP1> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_first_person_pronoun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add first person pronoun <FPP1> tag — dtag_first_person_pronoun","text":"","code":"dtag_first_person_pronoun(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_first_person_pronoun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add first person pronoun <FPP1> tag — dtag_first_person_pronoun","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_first_person_pronoun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add first person pronoun <FPP1> tag — dtag_first_person_pronoun","text":"character vector first person pronoun  <FPP1> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_gerund.html","id":null,"dir":"Reference","previous_headings":"","what":"Tag gerunds — dtag_gerund","title":"Tag gerunds — dtag_gerund","text":"Adds gerund tag  <GER> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_gerund.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tag gerunds — dtag_gerund","text":"","code":"dtag_gerund(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_gerund.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tag gerunds — dtag_gerund","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_gerund.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tag gerunds — dtag_gerund","text":"character vector gerund <GER> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_hedges.html","id":null,"dir":"Reference","previous_headings":"","what":"Add hedges <HDG> tag — dtag_hedges","title":"Add hedges <HDG> tag — dtag_hedges","text":"Adds hedges <HDG> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_hedges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add hedges <HDG> tag — dtag_hedges","text":"","code":"dtag_hedges(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_hedges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add hedges <HDG> tag — dtag_hedges","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_hedges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add hedges <HDG> tag — dtag_hedges","text":"character vector emphatic <EMPH> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_hedges.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add hedges <HDG> tag — dtag_hedges","text":"case multiword units \"less\", second third token _ST tag replaced _NULL.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_hesitation.html","id":null,"dir":"Reference","previous_headings":"","what":"Add hesitation markers — dtag_hesitation","title":"Add hesitation markers — dtag_hesitation","text":"Add hesitation marker <HSTN> vector tokenized strings.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_hesitation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add hesitation markers — dtag_hesitation","text":"","code":"dtag_hesitation(x, regex = \"\\\\berm?\\\\b|\\\\berm?_|\\\\bum\\\\b|\\\\bum_\")"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_hesitation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add hesitation markers — dtag_hesitation","text":"x character vector <HSTN> added, necessary. regex regular expression (default \"\\berm?\\b|\\berm?|\\bum\\b|\\bum\"). regex expression case insensitive default.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_hesitation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add hesitation markers — dtag_hesitation","text":"character vector hesitation tags appended.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_hesitation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add hesitation markers — dtag_hesitation","text":"","code":"dtag_hesitation(c(\"I'm\", \"not\", \"sure\",\".\", \"Um\" ,\",\" ,\"no\")) #> [1] \"I'm\"       \"not\"       \"sure\"      \".\"         \"Um <HSTN>\" \",\"         #> [7] \"no\""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_ind_pron.html","id":null,"dir":"Reference","previous_headings":"","what":"Tag indefinite prononouns — dtag_ind_pron","title":"Tag indefinite prononouns — dtag_ind_pron","text":"Adds indefinite pronoun tag  <INPR> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_ind_pron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tag indefinite prononouns — dtag_ind_pron","text":"","code":"dtag_ind_pron(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_ind_pron.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tag indefinite prononouns — dtag_ind_pron","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_ind_pron.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tag indefinite prononouns — dtag_ind_pron","text":"character vector indefinite pronoun <INPR> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_indep_cc.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Independent Clause Coordination <ANDC> tag — dtag_indep_cc","title":"Add Independent Clause Coordination <ANDC> tag — dtag_indep_cc","text":"Adds independent clause coordination <ANDC> based regex matches.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_indep_cc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Independent Clause Coordination <ANDC> tag — dtag_indep_cc","text":"","code":"dtag_indep_cc(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_indep_cc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Independent Clause Coordination <ANDC> tag — dtag_indep_cc","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_indep_cc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Independent Clause Coordination <ANDC> tag — dtag_indep_cc","text":"character vector independent clause coordination <ANDC> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_necessity_modal.html","id":null,"dir":"Reference","previous_headings":"","what":"Add necessity modal <NEMD> tag — dtag_necessity_modal","title":"Add necessity modal <NEMD> tag — dtag_necessity_modal","text":"Adds necessity modal tag <NEMD> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_necessity_modal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add necessity modal <NEMD> tag — dtag_necessity_modal","text":"","code":"dtag_necessity_modal(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_necessity_modal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add necessity modal <NEMD> tag — dtag_necessity_modal","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_necessity_modal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add necessity modal <NEMD> tag — dtag_necessity_modal","text":"character vector necessity modal   <NEMD> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_negation.html","id":null,"dir":"Reference","previous_headings":"","what":"Tag analytic negation — dtag_negation","title":"Tag analytic negation — dtag_negation","text":"Adds analytic negation tag  <XX0> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_negation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tag analytic negation — dtag_negation","text":"","code":"dtag_negation(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_negation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tag analytic negation — dtag_negation","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_negation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tag analytic negation — dtag_negation","text":"character vector negation <XX0> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_nominalisation.html","id":null,"dir":"Reference","previous_headings":"","what":"Tag nominalisation — dtag_nominalisation","title":"Tag nominalisation — dtag_nominalisation","text":"Adds nominalisation tag  <NOMZ> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_nominalisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tag nominalisation — dtag_nominalisation","text":"","code":"dtag_nominalisation(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_nominalisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tag nominalisation — dtag_nominalisation","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_nominalisation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tag nominalisation — dtag_nominalisation","text":"character vector nominalisation <NOMZ> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_passives_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Add passive tags <BYPA> — dtag_passives_by","title":"Add passive tags <BYPA> — dtag_passives_by","text":"function tags passives text previously _ST tagged, tokenized tagged  dtag_passives() function.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_passives_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add passive tags <BYPA> — dtag_passives_by","text":"","code":"dtag_passives_by(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_passives_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add passive tags <BYPA> — dtag_passives_by","text":"x character vector strings tokenized tagged _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_passives_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add passive tags <BYPA> — dtag_passives_by","text":"character vector passive <BYPA> tags added.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_passives_by.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add passive tags <BYPA> — dtag_passives_by","text":"function replaces <PASS> tag <BYPA> \"\" token found within 1 3 tokens tagged passive. Usually need run function unless dtag_passives(= FALSE) run first.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_past_part.html","id":null,"dir":"Reference","previous_headings":"","what":"Add past participial <PASTP> tag — dtag_past_part","title":"Add past participial <PASTP> tag — dtag_past_part","text":"Adds past participial <PASTP> based regex matches.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_past_part.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add past participial <PASTP> tag — dtag_past_part","text":"","code":"dtag_past_part(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_past_part.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add past participial <PASTP> tag — dtag_past_part","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_past_part.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add past participial <PASTP> tag — dtag_past_part","text":"character vector past participial <PASTP> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_past_tenses.html","id":null,"dir":"Reference","previous_headings":"","what":"Add past tense <VBD> tag to all verbs in past tense — dtag_past_tenses","title":"Add past tense <VBD> tag to all verbs in past tense — dtag_past_tenses","text":"Adds generic past tense tag  <VBD> past tenses based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_past_tenses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add past tense <VBD> tag to all verbs in past tense — dtag_past_tenses","text":"","code":"dtag_past_tenses(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_past_tenses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add past tense <VBD> tag to all verbs in past tense — dtag_past_tenses","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_past_tenses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add past tense <VBD> tag to all verbs in past tense — dtag_past_tenses","text":"character vector past tense verb matches  tagged <VBD>.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_past_whiz.html","id":null,"dir":"Reference","previous_headings":"","what":"Add past participial WHIZ deletion relative <WZPAST> tag — dtag_past_whiz","title":"Add past participial WHIZ deletion relative <WZPAST> tag — dtag_past_whiz","text":"Adds past participial WHIZ deletion relative <WZPAST> based regex matches.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_past_whiz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add past participial WHIZ deletion relative <WZPAST> tag — dtag_past_whiz","text":"","code":"dtag_past_whiz(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_past_whiz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add past participial WHIZ deletion relative <WZPAST> tag — dtag_past_whiz","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_past_whiz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add past participial WHIZ deletion relative <WZPAST> tag — dtag_past_whiz","text":"character vector past participial WHIZ deletion relative <WZPAST> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_perfect_asp.html","id":null,"dir":"Reference","previous_headings":"","what":"Add perfect aspect <PEAS> tag — dtag_perfect_asp","title":"Add perfect aspect <PEAS> tag — dtag_perfect_asp","text":"Adds perfect aspect tag <PEAS> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_perfect_asp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add perfect aspect <PEAS> tag — dtag_perfect_asp","text":"","code":"dtag_perfect_asp(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_perfect_asp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add perfect aspect <PEAS> tag — dtag_perfect_asp","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_perfect_asp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add perfect aspect <PEAS> tag — dtag_perfect_asp","text":"character vector prefect aspect <PEAS> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_phrasal_coord.html","id":null,"dir":"Reference","previous_headings":"","what":"Add phrasal coordination <PHC> tag — dtag_phrasal_coord","title":"Add phrasal coordination <PHC> tag — dtag_phrasal_coord","text":"Adds phrasal coordination tag <PHC> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_phrasal_coord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add phrasal coordination <PHC> tag — dtag_phrasal_coord","text":"","code":"dtag_phrasal_coord(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_phrasal_coord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add phrasal coordination <PHC> tag — dtag_phrasal_coord","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_phrasal_coord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add phrasal coordination <PHC> tag — dtag_phrasal_coord","text":"character vector phrasal coordination <PHC> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_phrasal_coord.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add phrasal coordination <PHC> tag — dtag_phrasal_coord","text":"<PHC> tag added case \"\" certain conditions : two adverb tags two adjective tags two noun tags","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_place_adverbials.html","id":null,"dir":"Reference","previous_headings":"","what":"Add place adverbial <PLACE> tag — dtag_place_adverbials","title":"Add place adverbial <PLACE> tag — dtag_place_adverbials","text":"Adds place adverbial <PLACE> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_place_adverbials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add place adverbial <PLACE> tag — dtag_place_adverbials","text":"","code":"dtag_place_adverbials(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_place_adverbials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add place adverbial <PLACE> tag — dtag_place_adverbials","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_place_adverbials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add place adverbial <PLACE> tag — dtag_place_adverbials","text":"character vector place adverbial <PLACE> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_possessives.html","id":null,"dir":"Reference","previous_headings":"","what":"Correct Stanford (ST) possessive tags — dtag_possessives","title":"Correct Stanford (ST) possessive tags — dtag_possessives","text":"Correct Stanford _ST possessive tags replacing $ S make future regex matching easier.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_possessives.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correct Stanford (ST) possessive tags — dtag_possessives","text":"","code":"dtag_possessives(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_possessives.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correct Stanford (ST) possessive tags — dtag_possessives","text":"x character vector strings, tokenized _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_possessives.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correct Stanford (ST) possessive tags — dtag_possessives","text":"character vector strings, tokenized \"..$\" replaced \"..S\"","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_possessives.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correct Stanford (ST) possessive tags — dtag_possessives","text":"","code":"x <- c(\"Their_PRP$\", \"house_NN\", \"was_VBD\", \"big_JJ\", \"and_CC\", \"luxurious_JJ\", \"._.\") dtag_possessives(x) #> [1] \"Their_PRPS\"   \"house_NN\"     \"was_VBD\"      \"big_JJ\"       \"and_CC\"       #> [6] \"luxurious_JJ\" \"._.\""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_possibility_modal.html","id":null,"dir":"Reference","previous_headings":"","what":"Add possibility modal <POMD> tag — dtag_possibility_modal","title":"Add possibility modal <POMD> tag — dtag_possibility_modal","text":"Adds possibility modal tag <POMD> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_possibility_modal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add possibility modal <POMD> tag — dtag_possibility_modal","text":"","code":"dtag_possibility_modal(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_possibility_modal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add possibility modal <POMD> tag — dtag_possibility_modal","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_possibility_modal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add possibility modal <POMD> tag — dtag_possibility_modal","text":"character vector possibility modal   <POMD> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_pp_rel_clauses.html","id":null,"dir":"Reference","previous_headings":"","what":"Add pied piper relative clause <PIRE> tag — dtag_pp_rel_clauses","title":"Add pied piper relative clause <PIRE> tag — dtag_pp_rel_clauses","text":"Adds pied piper relative clausetag <PIRE> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_pp_rel_clauses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add pied piper relative clause <PIRE> tag — dtag_pp_rel_clauses","text":"","code":"dtag_pp_rel_clauses(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_pp_rel_clauses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add pied piper relative clause <PIRE> tag — dtag_pp_rel_clauses","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_pp_rel_clauses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add pied piper relative clause <PIRE> tag — dtag_pp_rel_clauses","text":"character vector pied piper relative clause <PIRE> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_predictive_modal.html","id":null,"dir":"Reference","previous_headings":"","what":"Add predictive modal <PRMD> tag — dtag_predictive_modal","title":"Add predictive modal <PRMD> tag — dtag_predictive_modal","text":"Adds predictive modal tag <PRMD> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_predictive_modal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add predictive modal <PRMD> tag — dtag_predictive_modal","text":"","code":"dtag_predictive_modal(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_predictive_modal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add predictive modal <PRMD> tag — dtag_predictive_modal","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_predictive_modal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add predictive modal <PRMD> tag — dtag_predictive_modal","text":"character vector predictive modal   <PRMD> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_prepositions.html","id":null,"dir":"Reference","previous_headings":"","what":"Add preposition <PIN> tag — dtag_prepositions","title":"Add preposition <PIN> tag — dtag_prepositions","text":"Adds preposition tag  <PIN> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_prepositions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add preposition <PIN> tag — dtag_prepositions","text":"","code":"dtag_prepositions(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_prepositions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add preposition <PIN> tag — dtag_prepositions","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_prepositions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add preposition <PIN> tag — dtag_prepositions","text":"character vector preposition <PIN> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_pres_part.html","id":null,"dir":"Reference","previous_headings":"","what":"Add present participial <PRESP> tag — dtag_pres_part","title":"Add present participial <PRESP> tag — dtag_pres_part","text":"Adds present participial <PRESP> based regex matches.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_pres_part.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add present participial <PRESP> tag — dtag_pres_part","text":"","code":"dtag_pres_part(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_pres_part.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add present participial <PRESP> tag — dtag_pres_part","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_pres_part.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add present participial <PRESP> tag — dtag_pres_part","text":"character vector present participial <PRESP> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_pres_whiz.html","id":null,"dir":"Reference","previous_headings":"","what":"Add present participial WHIZ deletion relative <WZPRES> tag — dtag_pres_whiz","title":"Add present participial WHIZ deletion relative <WZPRES> tag — dtag_pres_whiz","text":"Adds present participial WHIZ deletion relative <WZPRES> based regex matches.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_pres_whiz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add present participial WHIZ deletion relative <WZPRES> tag — dtag_pres_whiz","text":"","code":"dtag_pres_whiz(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_pres_whiz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add present participial WHIZ deletion relative <WZPRES> tag — dtag_pres_whiz","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_pres_whiz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add present participial WHIZ deletion relative <WZPRES> tag — dtag_pres_whiz","text":"character vector present participial WHIZ deletion relative <WZPRES> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_present_tenses.html","id":null,"dir":"Reference","previous_headings":"","what":"Add present tense <VPRT> tag to all verbs in present tense — dtag_present_tenses","title":"Add present tense <VPRT> tag to all verbs in present tense — dtag_present_tenses","text":"Adds generic present tense tag  <VPRT> present tenses based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_present_tenses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add present tense <VPRT> tag to all verbs in present tense — dtag_present_tenses","text":"","code":"dtag_present_tenses(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_present_tenses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add present tense <VPRT> tag to all verbs in present tense — dtag_present_tenses","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_present_tenses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add present tense <VPRT> tag to all verbs in present tense — dtag_present_tenses","text":"character vector present tense verb matches  tagged <VPRT>.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_private_verb.html","id":null,"dir":"Reference","previous_headings":"","what":"Add private verb <PRIV> tag — dtag_private_verb","title":"Add private verb <PRIV> tag — dtag_private_verb","text":"Adds private verb tag <PRIV> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_private_verb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add private verb <PRIV> tag — dtag_private_verb","text":"","code":"dtag_private_verb(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_private_verb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add private verb <PRIV> tag — dtag_private_verb","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_private_verb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add private verb <PRIV> tag — dtag_private_verb","text":"character vector private verb <PRIV> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_private_verb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add private verb <PRIV> tag — dtag_private_verb","text":"list private verbs matched, see shorthand character vector named private sh[\"private\"]","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_pro_do.html","id":null,"dir":"Reference","previous_headings":"","what":"Add pro verb do <PROD> tag — dtag_pro_do","title":"Add pro verb do <PROD> tag — dtag_pro_do","text":"Adds pro verb tag <PROD> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_pro_do.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add pro verb do <PROD> tag — dtag_pro_do","text":"","code":"dtag_pro_do(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_pro_do.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add pro verb do <PROD> tag — dtag_pro_do","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_pro_do.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add pro verb do <PROD> tag — dtag_pro_do","text":"character vector pro verb <PROD> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_pronoun_it.html","id":null,"dir":"Reference","previous_headings":"","what":"Add it pronoun <PIT> tag — dtag_pronoun_it","title":"Add it pronoun <PIT> tag — dtag_pronoun_it","text":"Adds pronoun tag <PIT> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_pronoun_it.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add it pronoun <PIT> tag — dtag_pronoun_it","text":"","code":"dtag_pronoun_it(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_pronoun_it.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add it pronoun <PIT> tag — dtag_pronoun_it","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_pronoun_it.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add it pronoun <PIT> tag — dtag_pronoun_it","text":"character vector pronoun  <PIT> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_public_verb.html","id":null,"dir":"Reference","previous_headings":"","what":"Add public verb <PUBV> tag — dtag_public_verb","title":"Add public verb <PUBV> tag — dtag_public_verb","text":"Adds public verb tag <PUBV> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_public_verb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add public verb <PUBV> tag — dtag_public_verb","text":"","code":"dtag_public_verb(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_public_verb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add public verb <PUBV> tag — dtag_public_verb","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_public_verb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add public verb <PUBV> tag — dtag_public_verb","text":"character vector public verb <PUBV> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_public_verb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add public verb <PUBV> tag — dtag_public_verb","text":"list public verbs matched, see shorthand character vector named public sh[\"public\"]","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_quant_pron.html","id":null,"dir":"Reference","previous_headings":"","what":"Tag quantifier pronouns — dtag_quant_pron","title":"Tag quantifier pronouns — dtag_quant_pron","text":"Adds quantifier pronoun tag  <QUPR> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_quant_pron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tag quantifier pronouns — dtag_quant_pron","text":"","code":"dtag_quant_pron(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_quant_pron.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tag quantifier pronouns — dtag_quant_pron","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_quant_pron.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tag quantifier pronouns — dtag_quant_pron","text":"character vector quantifier pronoun <QUPR> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_quantifiers.html","id":null,"dir":"Reference","previous_headings":"","what":"Tag quantifiers — dtag_quantifiers","title":"Tag quantifiers — dtag_quantifiers","text":"Adds quantifier tag  <QUAN> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_quantifiers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tag quantifiers — dtag_quantifiers","text":"","code":"dtag_quantifiers(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_quantifiers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tag quantifiers — dtag_quantifiers","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_quantifiers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tag quantifiers — dtag_quantifiers","text":"character vector quantifier <QUAN> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_second_person_pronoun.html","id":null,"dir":"Reference","previous_headings":"","what":"Add second person pronoun <SPP2> tag — dtag_second_person_pronoun","title":"Add second person pronoun <SPP2> tag — dtag_second_person_pronoun","text":"Adds second person pronoun <SPP2> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_second_person_pronoun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add second person pronoun <SPP2> tag — dtag_second_person_pronoun","text":"","code":"dtag_second_person_pronoun(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_second_person_pronoun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add second person pronoun <SPP2> tag — dtag_second_person_pronoun","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_second_person_pronoun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add second person pronoun <SPP2> tag — dtag_second_person_pronoun","text":"character vector second person pronoun  <SPP2> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_seem_appear.html","id":null,"dir":"Reference","previous_headings":"","what":"Add seem / appear verb <SMP> tag — dtag_seem_appear","title":"Add seem / appear verb <SMP> tag — dtag_seem_appear","text":"Adds seem / appear  verb tag <SMP> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_seem_appear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add seem / appear verb <SMP> tag — dtag_seem_appear","text":"","code":"dtag_seem_appear(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_seem_appear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add seem / appear verb <SMP> tag — dtag_seem_appear","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_seem_appear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add seem / appear verb <SMP> tag — dtag_seem_appear","text":"character vector seem / appear  verb <SMP> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_sentence_rels.html","id":null,"dir":"Reference","previous_headings":"","what":"Add sentence relatives <SERE> tag — dtag_sentence_rels","title":"Add sentence relatives <SERE> tag — dtag_sentence_rels","text":"Adds sentence relatives tag <SERE> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_sentence_rels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add sentence relatives <SERE> tag — dtag_sentence_rels","text":"","code":"dtag_sentence_rels(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_sentence_rels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add sentence relatives <SERE> tag — dtag_sentence_rels","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_sentence_rels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add sentence relatives <SERE> tag — dtag_sentence_rels","text":"character vector sentence relatives <SERE> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_split_auxiliaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Add split auxiliary <SPAU> tag — dtag_split_auxiliaries","title":"Add split auxiliary <SPAU> tag — dtag_split_auxiliaries","text":"Adds split auxiliary <SPAU> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_split_auxiliaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add split auxiliary <SPAU> tag — dtag_split_auxiliaries","text":"","code":"dtag_split_auxiliaries(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_split_auxiliaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add split auxiliary <SPAU> tag — dtag_split_auxiliaries","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_split_auxiliaries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add split auxiliary <SPAU> tag — dtag_split_auxiliaries","text":"character vector split auxiliary  <SPAU> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_split_infinitives.html","id":null,"dir":"Reference","previous_headings":"","what":"Add split infinitive <SPIN> tag — dtag_split_infinitives","title":"Add split infinitive <SPIN> tag — dtag_split_infinitives","text":"Adds split infinitive <SPIN> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_split_infinitives.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add split infinitive <SPIN> tag — dtag_split_infinitives","text":"","code":"dtag_split_infinitives(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_split_infinitives.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add split infinitive <SPIN> tag — dtag_split_infinitives","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_split_infinitives.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add split infinitive <SPIN> tag — dtag_split_infinitives","text":"character vector split infinitive  <SPIN> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_str_prepositions.html","id":null,"dir":"Reference","previous_headings":"","what":"Add stranded preposition <STPR> tag — dtag_str_prepositions","title":"Add stranded preposition <STPR> tag — dtag_str_prepositions","text":"Adds stranded preposition  <STPR> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_str_prepositions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add stranded preposition <STPR> tag — dtag_str_prepositions","text":"","code":"dtag_str_prepositions(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_str_prepositions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add stranded preposition <STPR> tag — dtag_str_prepositions","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_str_prepositions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add stranded preposition <STPR> tag — dtag_str_prepositions","text":"character vector stranded preposition  <STPR> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_suasive_verb.html","id":null,"dir":"Reference","previous_headings":"","what":"Add suasive verb <SUAV> tag — dtag_suasive_verb","title":"Add suasive verb <SUAV> tag — dtag_suasive_verb","text":"Adds suasive verb tag <SUAV> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_suasive_verb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add suasive verb <SUAV> tag — dtag_suasive_verb","text":"","code":"dtag_suasive_verb(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_suasive_verb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add suasive verb <SUAV> tag — dtag_suasive_verb","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_suasive_verb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add suasive verb <SUAV> tag — dtag_suasive_verb","text":"character vector suasive verb <SUAV> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_suasive_verb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add suasive verb <SUAV> tag — dtag_suasive_verb","text":"list suasive verbs matched, see shorthand character vector named suasive sh[\"suasive\"]","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_syn_negation.html","id":null,"dir":"Reference","previous_headings":"","what":"Add synthetic negation <SYNE> tag — dtag_syn_negation","title":"Add synthetic negation <SYNE> tag — dtag_syn_negation","text":"Adds synthetic negation <SYNE> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_syn_negation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add synthetic negation <SYNE> tag — dtag_syn_negation","text":"","code":"dtag_syn_negation(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_syn_negation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add synthetic negation <SYNE> tag — dtag_syn_negation","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_syn_negation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add synthetic negation <SYNE> tag — dtag_syn_negation","text":"character vector synthetic negation <SYNE> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"dtag_tbl — dtag_tbl","title":"dtag_tbl — dtag_tbl","text":"Compute Biber-style dimension scores data frame.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dtag_tbl — dtag_tbl","text":"","code":"dtag_tbl(   tbl,   input = 1,   text = 2,   tokenized = FALSE,   ttr = 400,   deflated = TRUE,   exclude = NULL )"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dtag_tbl — dtag_tbl","text":"tbl data frame least one column input id  another _ST tagged text. input column input id (defaults 1st position, can named e.g. \"colname1\"). text column text (defaults 2nd position, can named e.g. \"colname12\"). text tagged _ST tags, flattened, tokenized form. tokenized Logical. default FALSE, case function tokenizes text str_split(text, \" \"). Set TRUE text already tokenized list column. ttr Maximum number tokens consider TTR, defaults 400. deflated Logical. TRUE (default), Dimension scores calculated without using low mean frequency features Biber's original study, following MAT tagger algorithm (Nini 2019). exclude character vector dimension tags want include analysis. Note dimension tags quoted inside angular brackets. example: (1) word counts texts 400, may want exclude type token ratios analysis exclude = \"<TTR>\". (2) tags (<WZPRES> <GER>)  manually checked original Biber study, automatically tagged .  can exclude tags naming exclude character vector exclude = c(\"<GER>\", \"<WZPRES>\"). (3) exclude tags manually checked Biber, use argument exclude = \"<MANUAL>\" argument: exclude = c(\"<DEMP>\", \"<GER>\", \"<PASTP>\", \"<PRESP>\", \"<SERE>\", \"<THAC>\", \"<THVC>\", \"<TOBJ>\", \"<TSUB>\", \"<WZPAST>\", \"<WZPRES>\") (4) can combine (1) (3) exclude = c(\"<MANUAL>\" , \"<TTR>\")","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dtag_tbl — dtag_tbl","text":"tibble containing: wordcount - number non-punctuation tokens found text dimension - Dimension1 ~ Dimension6 Biber 1988 feature feature - <MDA> tag AWL TTR detail - brief description feature count - number times feature counted text value - case <MDA> tag, normalized frequency per 100 tokens z-score - value scaled biber_mean biber_sd d-score - z-score, sign negative dimension features reversed biber_mean biber_sd feature, based Biber 1988 closest matching text type input, based Biber 1989","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_tbl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"dtag_tbl — dtag_tbl","text":"function adds multidimensional analysis <MDA> tags data frame. data frame contain one column identify input id, another text tagged _ST tags, flattened non-tokenized form. tagging text, function calculates Dimension scores based Biber 1988 standard, approximates closest text type per Biber 1989 text classification.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_tbl.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"dtag_tbl — dtag_tbl","text":"Biber, D. (1988). Variation across Speech Writing. Cambridge: Cambridge University Press. doi:10.1017/CBO9780511621024 Biber, D. (1989). typology English texts. , 27(1), 3-44. https://doi.org/10.1515/ling.1989.27.1.3 Nini, . (2019). Multi-Dimensional Analysis Tagger. Berber Sardinha, T. &  Veirano Pinto M. (eds), Multi-Dimensional Analysis: Research Methods Current  Issues, 67-94, London; New York: Bloomsbury Academic.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_that_ac.html","id":null,"dir":"Reference","previous_headings":"","what":"Add THAT as adjectival complement <THAC> tag — dtag_that_ac","title":"Add THAT as adjectival complement <THAC> tag — dtag_that_ac","text":"Adds adjectival complement <THAC> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_that_ac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add THAT as adjectival complement <THAC> tag — dtag_that_ac","text":"","code":"dtag_that_ac(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_that_ac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add THAT as adjectival complement <THAC> tag — dtag_that_ac","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_that_ac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add THAT as adjectival complement <THAC> tag — dtag_that_ac","text":"character vector adjectival complement <THAC> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_that_del.html","id":null,"dir":"Reference","previous_headings":"","what":"Add ","title":"Add ","text":"Adds \"\" deletion <THATD> based regex matches.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_that_del.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add ","text":"","code":"dtag_that_del(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_that_del.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add ","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_that_del.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add ","text":"character vector \"\" deletion <THATD> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_that_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Add ","title":"Add ","text":"Adds \"\" relative clauses object position <TOBJ> based regex matches.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_that_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add ","text":"","code":"dtag_that_obj(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_that_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add ","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_that_obj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add ","text":"character vector \"\" relative clauses object Position <TOBJ> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_that_subj.html","id":null,"dir":"Reference","previous_headings":"","what":"Add ","title":"Add ","text":"Adds \"\" relative clauses subject position <TSUB> based regex matches.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_that_subj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add ","text":"","code":"dtag_that_subj(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_that_subj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add ","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_that_subj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add ","text":"character vector \"\" relative clauses subject position <TSUB> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_that_vc.html","id":null,"dir":"Reference","previous_headings":"","what":"Add THAT as verbal complement <THVC> tag — dtag_that_vc","title":"Add THAT as verbal complement <THVC> tag — dtag_that_vc","text":"Adds verbal complement <THVC> based regex matches.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_that_vc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add THAT as verbal complement <THVC> tag — dtag_that_vc","text":"","code":"dtag_that_vc(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_that_vc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add THAT as verbal complement <THVC> tag — dtag_that_vc","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_that_vc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add THAT as verbal complement <THVC> tag — dtag_that_vc","text":"character vector verbal complement <THVC> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_third_person_pronoun.html","id":null,"dir":"Reference","previous_headings":"","what":"Add third person pronoun <TPP3> tag — dtag_third_person_pronoun","title":"Add third person pronoun <TPP3> tag — dtag_third_person_pronoun","text":"Adds third person pronoun tag <TPP3> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_third_person_pronoun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add third person pronoun <TPP3> tag — dtag_third_person_pronoun","text":"","code":"dtag_third_person_pronoun(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_third_person_pronoun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add third person pronoun <TPP3> tag — dtag_third_person_pronoun","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_third_person_pronoun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add third person pronoun <TPP3> tag — dtag_third_person_pronoun","text":"character vector third person pronoun  <TPP3> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_time_adverbials.html","id":null,"dir":"Reference","previous_headings":"","what":"Add time adverbial <TIME> tag — dtag_time_adverbials","title":"Add time adverbial <TIME> tag — dtag_time_adverbials","text":"Adds time adverbial <TIME> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_time_adverbials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add time adverbial <TIME> tag — dtag_time_adverbials","text":"","code":"dtag_time_adverbials(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_time_adverbials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add time adverbial <TIME> tag — dtag_time_adverbials","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_time_adverbials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add time adverbial <TIME> tag — dtag_time_adverbials","text":"character vector time adverbial <TIME> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_to_inf.html","id":null,"dir":"Reference","previous_headings":"","what":"Tag infinitive to — dtag_to_inf","title":"Tag infinitive to — dtag_to_inf","text":"Adds infinitive tag  <> tokens based regex match,","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_to_inf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tag infinitive to — dtag_to_inf","text":"","code":"dtag_to_inf(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_to_inf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tag infinitive to — dtag_to_inf","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_to_inf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tag infinitive to — dtag_to_inf","text":"character vector infinitive tag  <> added.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_to_inf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tag infinitive to — dtag_to_inf","text":"Adds infinitive tag  <> tokens form \"to_\". function followed dtag_to_prep() function distinguish used preposition.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_to_prep.html","id":null,"dir":"Reference","previous_headings":"","what":"Correction of TO as preposition — dtag_to_prep","title":"Correction of TO as preposition — dtag_to_prep","text":"Adds preposition tag  <PIN> preposition form to_TO","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_to_prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correction of TO as preposition — dtag_to_prep","text":"","code":"dtag_to_prep(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_to_prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correction of TO as preposition — dtag_to_prep","text":"x character tokenized strings _ST tags","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_to_prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correction of TO as preposition — dtag_to_prep","text":"character vector preposition <PIN> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_wh_clauses.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Wh- clause <WHCL> tag — dtag_wh_clauses","title":"Add Wh- clause <WHCL> tag — dtag_wh_clauses","text":"Adds Wh- clause tag <WHCL> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_wh_clauses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Wh- clause <WHCL> tag — dtag_wh_clauses","text":"","code":"dtag_wh_clauses(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_wh_clauses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Wh- clause <WHCL> tag — dtag_wh_clauses","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_wh_clauses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Wh- clause <WHCL> tag — dtag_wh_clauses","text":"character vector Wh- clause <WHCL> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_wh_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Add WH Relative Clauses on Object Position <WHOBJ> tag — dtag_wh_obj","title":"Add WH Relative Clauses on Object Position <WHOBJ> tag — dtag_wh_obj","text":"Adds WH relative clauses object position <WHOBJ> based regex matches.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_wh_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add WH Relative Clauses on Object Position <WHOBJ> tag — dtag_wh_obj","text":"","code":"dtag_wh_obj(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_wh_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add WH Relative Clauses on Object Position <WHOBJ> tag — dtag_wh_obj","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_wh_obj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add WH Relative Clauses on Object Position <WHOBJ> tag — dtag_wh_obj","text":"character vector WH relative clauses object position <WHOBJ> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_wh_questions.html","id":null,"dir":"Reference","previous_headings":"","what":"Add WH- question <WHQU> tag — dtag_wh_questions","title":"Add WH- question <WHQU> tag — dtag_wh_questions","text":"Adds WH- question tag <WHQU> based regex match.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_wh_questions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add WH- question <WHQU> tag — dtag_wh_questions","text":"","code":"dtag_wh_questions(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_wh_questions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add WH- question <WHQU> tag — dtag_wh_questions","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_wh_questions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add WH- question <WHQU> tag — dtag_wh_questions","text":"character vector WH- question <WHQU> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_wh_subj.html","id":null,"dir":"Reference","previous_headings":"","what":"Add WH Relative Clauses on Subject Position <WHSUB> tag — dtag_wh_subj","title":"Add WH Relative Clauses on Subject Position <WHSUB> tag — dtag_wh_subj","text":"Adds WH relative clauses subject position <WHSUB> based regex matches.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_wh_subj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add WH Relative Clauses on Subject Position <WHSUB> tag — dtag_wh_subj","text":"","code":"dtag_wh_subj(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_wh_subj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add WH Relative Clauses on Subject Position <WHSUB> tag — dtag_wh_subj","text":"x character tokenized strings _ST tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtag_wh_subj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add WH Relative Clauses on Subject Position <WHSUB> tag — dtag_wh_subj","text":"character vector WH relative clauses subject Position <WHSUB> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/dtagger-package.html","id":null,"dir":"Reference","previous_headings":"","what":"dtagger: Suite of Functions to Tag Text for Multidimensional Analysis — dtagger-package","title":"dtagger: Suite of Functions to Tag Text for Multidimensional Analysis — dtagger-package","text":"package (one paragraph).","code":""},{"path":[]},{"path":"https://timmarchand.github.io/dtagger/reference/dtagger-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"dtagger: Suite of Functions to Tag Text for Multidimensional Analysis — dtagger-package","text":"Maintainer: Tim Marchand timmarchand@gmail.com","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/find_mode.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the mode of a given vector — find_mode","title":"Find the mode of a given vector — find_mode","text":"function takes vector finds mode (frequent value)","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/find_mode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the mode of a given vector — find_mode","text":"","code":"find_mode(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/find_mode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the mode of a given vector — find_mode","text":"x vector","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/find_mode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the mode of a given vector — find_mode","text":"mode vector","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/find_mode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the mode of a given vector — find_mode","text":"","code":"find_mode(c(1,2,2,2,3,4,4)) #> [1] 2 # 2"},{"path":"https://timmarchand.github.io/dtagger/reference/find_non_ascii.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Non-ASCII Characters in Text — find_non_ascii","title":"Find Non-ASCII Characters in Text — find_non_ascii","text":"function finds non-ASCII characters given text column data frame. uses quick_conc function finding non-ASCII characters. results can optionally sorted non-ASCII characters.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/find_non_ascii.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Non-ASCII Characters in Text — find_non_ascii","text":"","code":"find_non_ascii(tbl, id = NULL, text = \"text\", sort_by_chr = FALSE)"},{"path":"https://timmarchand.github.io/dtagger/reference/find_non_ascii.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Non-ASCII Characters in Text — find_non_ascii","text":"tbl data frame contains text data. id character string indicating name identifier column tbl (default NULL). text character string indicating name text column tbl (default \"text\"). sort_by_chr logical indicating whether sort results non-ASCII characters (default FALSE).","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/find_non_ascii.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Non-ASCII Characters in Text — find_non_ascii","text":"tibble identified non-ASCII characters. row represents instance non-ASCII character. id NULL, tibble also includes identifier instance. sort_by_chr TRUE, tibble sorted non-ASCII characters.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/find_non_ascii.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Non-ASCII Characters in Text — find_non_ascii","text":"","code":"if (FALSE) { data <- tibble(id = 1:2, text = c(\"This is a text with a non-ASCII character: é.\", \"Another text without.\")) find_non_ascii(data, id = \"id\") }"},{"path":"https://timmarchand.github.io/dtagger/reference/init_udpipe_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize UDPipe Model — init_udpipe_model","title":"Initialize UDPipe Model — init_udpipe_model","text":"Initialize UDPipe Model","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/init_udpipe_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize UDPipe Model — init_udpipe_model","text":"","code":"init_udpipe_model(lang = \"english-ewt\")"},{"path":"https://timmarchand.github.io/dtagger/reference/init_udpipe_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize UDPipe Model — init_udpipe_model","text":"lang language use model. Default 'english-ewt'.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/init_udpipe_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize UDPipe Model — init_udpipe_model","text":"None","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/init_udpipe_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize UDPipe Model — init_udpipe_model","text":"","code":"if (FALSE) init_udpipe_model()"},{"path":"https://timmarchand.github.io/dtagger/reference/log_midpipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Log Midpipe — log_midpipe","title":"Log Midpipe — log_midpipe","text":"function interrupt pipe print expression continuing pipe.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/log_midpipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Midpipe — log_midpipe","text":"","code":"log_midpipe(x, expr)"},{"path":"https://timmarchand.github.io/dtagger/reference/log_midpipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log Midpipe — log_midpipe","text":"x data object. expr expression evaluated data object.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/log_midpipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log Midpipe — log_midpipe","text":"data object expression evaluated.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/missing_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Missing Tags — missing_tags","title":"Find Missing Tags — missing_tags","text":"function finds tags missing one vector present another.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/missing_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Missing Tags — missing_tags","text":"","code":"missing_tags(vec1, vec2, regex = NULL, regex1 = NULL, regex2 = NULL, ...)"},{"path":"https://timmarchand.github.io/dtagger/reference/missing_tags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Missing Tags — missing_tags","text":"vec1 character vector tagged text tokenised form used reference. vec2 character vector tagged text tokenised form compare vec1. regex regular expression tag checked vectors. regex1 regular expression tag search vector 1. regex2 regular expression tag search vector 2. ... Additional arguments passed quick_conc output.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/missing_tags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Missing Tags — missing_tags","text":"tibble showing quick_conc concordance missing tags vector 2 comparison vector 1.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/missing_tags.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Missing Tags — missing_tags","text":"function used compare tagging results text. texts reduced two vectors tokenised form. function produces concordance lines tags vector one missing index position vector two. inputs exactly length.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/multi_replace_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace multiple text tokens in strings — multi_replace_all","title":"Replace multiple text tokens in strings — multi_replace_all","text":"Replace multiple text tokens new text provided string.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/multi_replace_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace multiple text tokens in strings — multi_replace_all","text":"","code":"multi_replace_all(text, tbl, add_breaks = TRUE)"},{"path":"https://timmarchand.github.io/dtagger/reference/multi_replace_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace multiple text tokens in strings — multi_replace_all","text":"text string vector replace tokens . tbl two-column tibble token replace corresponding new value. add_breaks logical indicating whether add \\\\b (word boundary) either side token.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/multi_replace_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace multiple text tokens in strings — multi_replace_all","text":"character vector strings replaced tokens.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/multi_replace_all.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Replace multiple text tokens in strings — multi_replace_all","text":"function","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/multi_replace_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace multiple text tokens in strings — multi_replace_all","text":"","code":"# Replace multiple tokens text <- c(\"Hello world!\", \"Goodbye world!\") tbl <- data.frame(token = c(\"Hello\", \"world\"), new = c(\"Hi\", \"universe\")) multi_replace_all(text, tbl) #> [1] \"Hi universe!\"      \"Goodbye universe!\" #> [1] \"Hi universe!\" \"Goodbye universe!\""},{"path":"https://timmarchand.github.io/dtagger/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://timmarchand.github.io/dtagger/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/quick_conc.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick concordancing of pattern matches or index locations — quick_conc","title":"Quick concordancing of pattern matches or index locations — quick_conc","text":"Lightweight concordancing function return key words context (KWIC) tidy format.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/quick_conc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick concordancing of pattern matches or index locations — quick_conc","text":"","code":"quick_conc(x, index, n = 5, tokenize = FALSE, separated = FALSE)"},{"path":"https://timmarchand.github.io/dtagger/reference/quick_conc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick concordancing of pattern matches or index locations — quick_conc","text":"x character vector tokenized strings, single string index character vector regex pattern match, numeric vector use index matches n integer, specify number context tokens either side matched node tokenize logical, tokenize text first . TRUE, basic tokenizer used split string whitespaces punctuation (word internal apostrophes, marks hyphens). separated logical, separate context tokens ","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/quick_conc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick concordancing of pattern matches or index locations — quick_conc","text":"tibble containing: case - case number match found. left - objects immediately adjacent (n) left matched node. case separated = TRUE, left  separated left(n):left1 match - matched search item, defined index argument. right - tokens immediately adjacent (n) right matched node. case separated = TRUE, right tokens separated right1:right(n). index - index row position matched result input data frame.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/quick_conc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick concordancing of pattern matches or index locations — quick_conc","text":"","code":"x <- c(\"The\", \"cat\", \"sat\", \"on\", \"the\", \"mat\") index <- c(\"cat\", \"sat\") quick_conc(x, index, n = 2) #> # A tibble: 2 × 5 #>    case token_id left    match right  #>   <int>    <int> <chr>   <chr> <chr>  #> 1     1        2 NA The  cat   sat on #> 2     2        3 The cat sat   on the x <- \"The dog barked loudly, alerting the neighbors of potential danger. A nearby park seemed like the perfect spot for the dog and it quickly made its way there.\" quick_conc(x, index = \"dog\", n = 3, tokenize = TRUE, separated = TRUE) #> # A tibble: 2 × 9 #>    case token_id left3 left2 left1 match right1 right2 right3  #>   <int>    <int> <chr> <chr> <chr> <chr> <chr>  <chr>  <chr>   #> 1     1        2 NA    NA    The   dog   barked loudly ,       #> 2     2       23 spot  for   the   dog   and    it     quickly quick_conc(x, index = c(4,8,12), tokenize = TRUE) #> # A tibble: 3 × 5 #>    case token_id left                              match     right               #>   <int>    <int> <chr>                             <chr>     <chr>               #> 1     1        4 NA NA The dog barked              loudly    , alerting the nei… #> 2     2        8 barked loudly , alerting the      neighbors of potential dange… #> 3     3       12 the neighbors of potential danger .         A nearby park seem…"},{"path":"https://timmarchand.github.io/dtagger/reference/remove_duplicated_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes duplicated tags — remove_duplicated_tags","title":"Removes duplicated tags — remove_duplicated_tags","text":"Removes duplicated tags","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/remove_duplicated_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes duplicated tags — remove_duplicated_tags","text":"","code":"remove_duplicated_tags(x)"},{"path":"https://timmarchand.github.io/dtagger/reference/remove_duplicated_tags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes duplicated tags — remove_duplicated_tags","text":"x vector tags","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/remove_duplicated_tags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes duplicated tags — remove_duplicated_tags","text":"vector tags duplicates removed","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/sh.html","id":null,"dir":"Reference","previous_headings":"","what":"Shorthand Reference Data — sh","title":"Shorthand Reference Data — sh","text":"Shorthand frequently used regex tagging functions. regex patterns can matched calling sh[\"name_of_pattern\"].","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/sh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shorthand Reference Data — sh","text":"","code":"sh"},{"path":"https://timmarchand.github.io/dtagger/reference/sh.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Shorthand Reference Data — sh","text":"named vector regex patterns","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/sh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shorthand Reference Data — sh","text":"Data shortcuts used tagging functions","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/tokenize_tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Tokenize tag — tokenize_tag","title":"Tokenize tag — tokenize_tag","text":"Split character vector based tag. function tokenizes MDA tagged texts splitting space followed <MDA> tag. also work _ST tags default.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/tokenize_tag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tokenize tag — tokenize_tag","text":"","code":"tokenize_tag(vec, regex = \"\\\\s(?!<\\\\w+>)\")"},{"path":"https://timmarchand.github.io/dtagger/reference/tokenize_tag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tokenize tag — tokenize_tag","text":"vec character vector. regex regular expression used splitting vector. Use default setting <MDA> tags.","code":""},{"path":"https://timmarchand.github.io/dtagger/reference/tokenize_tag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tokenize tag — tokenize_tag","text":"list character vectors split tag.","code":""}]
