biber_base
load("~/Documents/dtagger/data/biber_base.rda")
View(biber_base)
save(biber_base, file="data/biber_base.RData")
biber_base
biber_base %>%
arrange(dimension, feature)
arrange(dimension, feature) |> arrange(dimension, feature)
library(tidyverse)
arrange(dimension, feature) |> arrange(dimension, feature)
biber_base %>% arrange(dimenion, feature)
biber_base %>% arrange(dimension, feature)
biber_base %>% arrange(dimension, feature) %>% filter(feature != "<IN>")
biber_base %>% arrange(dimension, feature) %>% filter(feature != "<IN>") %>% mutate(loading = "positive")
biber_base %>% arrange(dimension, feature) %>% filter(feature != "<IN>") %>% mutate(loading = if_else(feature %in%  c("<NN>", "<AWL>", "<PIN>", "<TTR>",
"<JJ>", "<TIME>", "<PLACE>", "<RB>"), "negative", positive")
)
)
biber_base %>% arrange(dimension, feature) %>% filter(feature != "<IN>") %>% mutate(loading = if_else(feature %in%  c("<NN>", "<AWL>", "<PIN>", "<TTR>",
"<JJ>", "<TIME>", "<PLACE>", "<RB>"), "negative", "positive")
)
biber_base %>% arrange(dimension, feature) %>% filter(feature != "<IN>") %>% mutate(loading = if_else(feature %in%  c("<NN>", "<AWL>", "<PIN>", "<TTR>",
"<JJ>", "<TIME>", "<PLACE>", "<RB>"), "negative", "positive")) %>% print(., n = Inf)
biber_base %>% arrange(dimension, feature) %>% filter(feature != "<IN>") %>% mutate(loading = if_else(feature %in%  c("<NN>", "<AWL>", "<PIN>", "<TTR>",
"<JJ>", "<TIME>", "<PLACE>", "<RB>"), "negative", "positive")) -> biber_base()
biber_base %>% arrange(dimension, feature) %>% filter(feature != "<IN>") %>% mutate(loading = if_else(feature %in%  c("<NN>", "<AWL>", "<PIN>", "<TTR>",
"<JJ>", "<TIME>", "<PLACE>", "<RB>"), "negative", "positive")) -> biber_base
biber_base
save(biber_base, file="data/biber_base.rda")
source("~/Documents/dtagger/R/dtag_tbl.R")
biber_base
check()
devtools::check()
.rs.restartR
.rs.restartR()
libray(devtools)
library(devtools)
check()
check()
use_r("missing_tags")
check()
check()
check()
load("~/Documents/dtagger/data/biber_base.rda")
View(biber_base)
str_flatten(sh[c("public" , "private" , "suasive","SMP")],"|")
str_c(str_flatten(sh[c("public" , "private" , "suasive")],"|"),
"(\\bseem|\\bseems|\\bseemed|\\bseeming|\\bappear|\\bappears|\\bappeared|\\bappearing)_V")
str_c(str_flatten(sh[c("public" , "private" , "suasive")],"|"),
"|\\bseem_|\\bseems_|\\bseemed_|\\bseeming_|\\bappear_|\\bappears_|\\bappeared_|\\bappearing")
use_r("compare_tags")
check()
check()
check()
check()
check()
>pmin()
?pmin
pmin(5:1, pi)
check()
check()
check()
use_r(add_Tukey_hsd)
use_r("add_Tukey_hsd")
chatgpt:::run_addin_ask_chatgpt()
check()
check()
use_r(tokenize_tag)
use_r("tokenize_tag")
check()
?all_of
use_r("conc_by_tag")
check()
check()
check()
check()
check()
check()
usethis::use_package("purrr")
check()
check()
check()
check()
check()
use_r("multi_replace_all")
check()
check()
check()
check()
check()
use_readme_rmd()
list.files(getwd())
list.files(getwd(), recursive = TRUE)
list.files(getwd(), recursive = TRUE, patterm = "*>R")
list.files(getwd(), recursive = TRUE, pattern = "*>R")
list.files(getwd(), recursive = TRUE, pattern = "*R")
list.files(getwd(), recursive = TRUE, pattern = "*R$")
l <- list.files(getwd(), recursive = TRUE, pattern = "*R$", full.names = TRUE)
l
sink("mynewRfile.R")
l <- list.files(getwd(), recursive = TRUE, pattern = "*R$", full.names = TRUE)
for(i in l){
current_file = readLines(l[i])
cat("\n\n#### Current file:",l[i],"\n\n")
cat(current_file, sep ="\n")
}
l[1]
l
l <- list.files(getwd(), recursive = TRUE, pattern = "*R$", full.names = TRUE)
l
list.files(getwd(), recursive = TRUE, pattern = "*R$", full.names = TRUE)
list.files(getwd(), recursive = TRUE, pattern = "*R$", full.names = TRUE)
sink()
l
l[1]
readLines(l[1])
l <- list.files(getwd(), recursive = TRUE, pattern = "*R$", full.names = TRUE)
readLines(l[1])
sink("mynewRfile.R")
for(i in l){
current_file = readLines(l[i])
cat("\n\n#### Current file:",l[i],"\n\n")
cat(current_file, sep ="\n")
}
sink()
for(i in l){
current_file = readLines(l[i])
cat("\n\n#### Current file:",l[i],"\n\n")
cat(current_file, sep ="\n")
}
for(i in 1:length(l){
for(i in 1:length(l)){
current_file = readLines(l[i])
cat("\n\n#### Current file:",l[i],"\n\n")
cat(current_file, sep ="\n")
}
sink("mynewRfile.R")
for(i in 1:length(l)){
current_file = readLines(l[i])
cat("\n\n#### Current file:",l[i],"\n\n")
cat(current_file, sep ="\n")
}
sink()
check()
install.packages("pkgdown")
#Run once to configure package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
check()
library(usethis)
check()
library(devtools)
check()
check()
check()
usethis::use_pkgdown_github_pages()
install.packages("usethis")
usethis::use_pkgdown_github_pages()
check()
devtool::check()
library(devtools)
check()
