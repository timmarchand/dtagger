% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dtag_tokenize.R
\name{dtag_tokenize}
\alias{dtag_tokenize}
\title{Tokenize strings}
\usage{
dtag_tokenize(x, flatten = FALSE)
}
\arguments{
\item{x}{A character vector containing the text you wish to tokenize.}

\item{flatten}{If 'TRUE', the tokeniser flattens the result into a single string,
with white spaces separating tokenised items.}
}
\value{
A character vector containing the tokenized text.
}
\description{
This function tokenizes a given string based on the Penn Treebank rules and
performs additional modifications to handle clitics (e.g., "n't", "'ll") and
periods (trailing full stops) in the text.
}
\details{
The function is a wrapper for the tokenizers::tokenize_ptb() function,
which generally works well but tends to co-join as single tokens sentence ending
full stops, and quotations starting with single quotation marks (apostrophes).

It can be used as a tokenizer to prepare text for the \code{add_st_tags()} function,
in which case you should use \code{flatten = TRUE} argument, in combination with
\code{add_st_tags(tokenizer = "horizontal")}:

\code{dtag_tokenize(text, flatten = TRUE) |> add_st_tags(tokenizer = "horizontal")}

Note the \code{add_st_tags()} function itself can also tokenize the text using the udmodel, but
this tends to separate hyphenated words, which might not be the desired result.

Check the examples to compare
}
\examples{
text <- "I was given a part-time job to prepare this 'example'. I'd say it isn't conclusive..."
dtag_tokenize(text)

# Compare the 'add_st_tags()' output:
\dontrun{
add_st_tags(text)dtag_tokenize(text) |> add_st_tags()
dtag_tokenize(text) |> add_st_tags(tokenizer = "horizontal")
dtag_tokenize(text, flatten = TRUE) |> add_st_tags(tokenizer = "horizontal")}
}
