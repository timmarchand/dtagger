% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_st_tags.R
\name{add_st_tags}
\alias{add_st_tags}
\title{Add ST Tags to Text}
\usage{
add_st_tags(
  x,
  mdl = udmodel,
  st_hesitation = FALSE,
  flattened = TRUE,
  skip_parse = TRUE,
  ...
)
}
\arguments{
\item{x}{A character vector of input text to be processed.}

\item{mdl}{A udpipe model to use for processing the text. The default is the udmodel.}

\item{st_hesitation}{A logical value indicating whether or not to extract hesitation markers
from the input text. If \code{TRUE}, the function will extract hesitation markers and return them separately.
Default is \code{FALSE}.}

\item{flattened}{A logical value indicating if the input text is flattened. If \code{FALSE}, i.e. if the character string is in
tokenized form, the function will flatten the text before processing. Default is \code{TRUE}.}

\item{skip_parse}{A logical value determining if the function should skip parsing
and only return tokenized and tagged text. If \code{FALSE}, the function returns the
full UD model when parsing. Default is \code{TRUE}.}

\item{...}{Additional arguments to be passed to the \code{udpipe_annotate()} function.
For example:

\code{tokenizer = "horizontal"} to force the \code{udpipe_annotate} function to tokenize on tokens
separated by white spaces. This will combine words and trailing punctuation marks, unless
they have been spearated by white space previously.

\code{tokenizer = "vertical"} to force the \code{udpipe_annotate} function to tokenize on tokens separated by
new line breaks.  This can be useful if you want the tokenizer to recognise multi-word
entities as a single token, or avoid separating hyphenated words.}
}
\value{
If \code{skip_parse} is \code{FALSE}, the function returns a tibble with the full udpipe model when parsing.
If \code{st_hesitation} is \code{TRUE} (experimental), the function returns a character vector of tokenized and tagged
text with hesitation markers extracted and handled separately.
Otherwise, the function returns a character vector of tokenized and tagged text.
}
\description{
The \code{add_st_tags} function is designed to process and annotate text using the Universal Dependencies
(UD) model with the udpipe package. It allows users to tokenize and tag text with part-of-speech (Stanford) tags,
and to extract and handle hesitation markers. The function provides options for controlling the parsing,
tokenizer type, and handling of flattened input.
}
\examples{
\dontrun{
# Example text:
text <- "This is an example sentence to be tagged"
# Example speech, tokenized:
speech <- c("I","don't", "know" ,  "erm" ,",", "whether" , "to" ,
"include" ,"hesitation" , "markers", ".")
# Initiate udpipe model
init_udpipe_model()
# Tag text
add_st_tags(text)
# Tag speech
add_st_tags(speech, st_hesitation = TRUE, tokenized = TRUE)}
}
